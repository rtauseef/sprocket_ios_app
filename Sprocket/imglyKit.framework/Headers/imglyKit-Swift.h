// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import AVFoundation;
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import CoreImage;
@import Foundation;
@import GLKit;
#endif

#import <imglyKit/imglyKit.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface AVCaptureDevice (SWIFT_EXTENSION(imglyKit))
@end


/// The tools that can be used in an instance of AdjustToolController.
///
/// <ul><li>Brightness: Change the brightness of the image.</li><li>Contrast:   Change the contrast of the image.</li><li>Saturation: Change the saturation of the image.</li></ul>
typedef SWIFT_ENUM(NSInteger, AdjustTool) {

/// Change the brightness of the image.
  AdjustToolBrightness = 0,

/// Change the contrast of the image.
  AdjustToolContrast = 1,

/// Change the saturation of the image.
  AdjustToolSaturation = 2,

/// Change the shadows of the image.
  AdjustToolShadows = 3,

/// Change the highlights of the image.
  AdjustToolHighlights = 4,

/// Change the exposure of the image.
  AdjustToolExposure = 5,

/// Change the clarity of the image.
  AdjustToolClarity = 6,
};

@class IMGLYPhotoEditMutableModel;
@class IMGLYConfiguration;
@class NSCoder;
@class UIColor;
@class IMGLYToolStackItem;
@class NSNotification;


/// A PhotoEditToolController is the base class for any tool controllers. Subclass this class if you want to add additional tools to the editor.
SWIFT_CLASS_NAMED("PhotoEditToolController")
@interface IMGLYPhotoEditToolController : UIViewController

/// The render mode that the preview image should be rendered with when this tool is active.
@property (nonatomic) IMGLYRenderMode preferredRenderMode;

/// The photo edit model that must be updated.
@property (nonatomic, readonly, strong) IMGLYPhotoEditMutableModel * _Nonnull photoEditModel;

/// The configuration object that configures this tool.
@property (nonatomic, readonly, strong) IMGLYConfiguration * _Nonnull configuration;

/// Initializes and returns a newly created tool stack controller with the given configuration.
///
/// \param configuration The configuration options to apply.
///
/// \returns  The initialized and configured tool stack controller object.
- (nonnull instancetype)initWithPhotoEditModel:(IMGLYPhotoEditMutableModel * _Nonnull)photoEditModel configuration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)viewDidLoad;

/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;

/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;

/// :nodoc:
- (void)updateViewConstraints;

/// :nodoc:
- (void)didReceiveMemoryWarning;

/// If set to true, the default preview view is used. If set to false, the default preview view is hidden and you are responsible for displaying the image.
@property (nonatomic, readonly) BOOL wantsDefaultPreviewView;

/// The scale factor that should be applied to the main preview view when this tool is on top of the stack. Defaults to 1.0.
@property (nonatomic, readonly) CGFloat preferredDefaultPreviewViewScale;

/// If set to true, scrolling in the default preview view is enabled while this tool is on top of the stack. Defaults to false.
@property (nonatomic, readonly) BOOL wantsScrollingInDefaultPreviewViewEnabled;

/// The background color that should be used when this tool is active.
@property (nonatomic, readonly, strong) UIColor * _Nullable preferredPreviewBackgroundColor;

/// The insets that should be applied to the preview view when this tool is active.
@property (nonatomic, readonly) UIEdgeInsets preferredPreviewViewInsets;

/// The tool stack configuration item.
@property (nonatomic, readonly, strong) IMGLYToolStackItem * _Nonnull toolStackItem;

/// Called when any property of the photo edit model changes.
///
/// \param notification The notification that was sent.
- (void)photoEditModelDidChange:(NSNotification * _Nonnull)notification;

/// Notifies the tool controller that it is about to become the active tool.
///
/// <em>Discussion:</em> If you override this method, you must call <code>super
/// </code> at some point in your implementation.
- (void)willBecomeActiveTool;

/// Notifies the tool controller that it became the active tool.
///
/// <em>Discussion:</em> If you override this method, you must call <code>super
/// </code> at some point in your implementation.
- (void)didBecomeActiveTool;

/// Notifies the tool controller that it is about to resign being the active tool.
///
/// <em>Discussion:</em> This method will <em>not</em> be called if another tool is pushed above this tool.
/// It is only called if you pop the tool from the tool stack controller. If you override this method,
/// you must call <code>super
/// </code> at some point in your implementation.
- (void)willResignActiveTool;

/// Notifies the tool controller that it resigned being the active tool.
///
/// <em>Discussion:</em> This method will <em>not</em> be called if another tool is pushed above this tool.
/// It is only called if you pop the tool from the tool stack controller. If you override this method,
/// you must call <code>super
/// </code> at some point in your implementation.
- (void)didResignActiveTool;
@end



/// An AdjustToolController is reponsible for displaying the UI to adjust the brightness, contrast and saturation of an image.
SWIFT_CLASS_NAMED("AdjustToolController")
@interface IMGLYAdjustToolController : IMGLYPhotoEditToolController

/// :nodoc:
- (void)viewDidLoad;

/// :nodoc:
- (void)updateViewConstraints;

/// :nodoc:
- (void)photoEditModelDidChange:(NSNotification * _Nonnull)notification;

/// :nodoc:
- (void)didBecomeActiveTool;

/// :nodoc:
- (void)willResignActiveTool;
- (nonnull instancetype)initWithPhotoEditModel:(IMGLYPhotoEditMutableModel * _Nonnull)photoEditModel configuration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionView;
@class UICollectionViewLayout;

@interface IMGLYAdjustToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>

/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
@end

@class NSIndexPath;

@interface IMGLYAdjustToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>

/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@class UICollectionViewCell;

@interface IMGLYAdjustToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>

/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;

/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;

/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@class UIButton;
@class IMGLYToolControllerOptionsBuilder;


/// Options for configuring a PhotoEditToolController.
SWIFT_CLASS_NAMED("ToolControllerOptions")
@interface IMGLYToolControllerOptions : NSObject

/// The title of the tool. By default this will be displayed in the secondary toolbar.
@property (nonatomic, readonly, copy) NSString * _Nullable title;

/// The tool's background color. Defaults to the configuration's global background color.
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;

/// A configuration closure to configure the apply button displayed at the bottom right. Defaults to a checkmark icon.
@property (nonatomic, readonly, copy) void (^ _Nullable applyButtonConfigurationClosure)(UIButton * _Nonnull);

/// A configuration closure to configure the discard button displayed at the bottom left. Defaults to a cross icon.
@property (nonatomic, readonly, copy) void (^ _Nullable discardButtonConfigurationClosure)(UIButton * _Nonnull);

/// This closure will be called when a tool has been entered.
@property (nonatomic, readonly, copy) void (^ _Nullable didEnterToolClosure)(void);

/// The closure will be called when a tool is about to be left.
@property (nonatomic, readonly, copy) void (^ _Nullable willLeaveToolClosure)(void);

/// Returns a newly allocated instance of a ToolControllerOptions using the default builder.
///
/// \returns  An instance of a <code>ToolControllerOptions
/// </code>.
- (nonnull instancetype)init;

/// Returns a newly allocated instance of a ToolControllerOptions using the given builder.
///
/// \param builder A <code>ToolControllerOptionsBuilder
/// </code> instance.
///
/// \returns  An instance of a <code>ToolControllerOptions
/// </code>.
- (nonnull instancetype)initWithEditorBuilder:(IMGLYToolControllerOptionsBuilder * _Nonnull)editorBuilder OBJC_DESIGNATED_INITIALIZER;
@end

@class IMGLYIconCaptionCollectionViewCell;
@class IMGLYSlider;
@class UIView;
@class IMGLYAdjustToolControllerOptionsBuilder;


/// Options for configuring an AdjustToolController.
SWIFT_CLASS_NAMED("AdjustToolControllerOptions")
@interface IMGLYAdjustToolControllerOptions : IMGLYToolControllerOptions

/// This closure allows further configuration of the adjust tool buttons. The closure is called for each adjust tool button and has the button and its corresponding adjust tool as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable adjustToolButtonConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull, enum AdjustTool);

/// This closure is called every time the user selects a tool.
@property (nonatomic, readonly, copy) void (^ _Nullable adjustToolSelectedClosure)(enum AdjustTool);

/// This closure can be used to configure the slider that is visible when selecting an adjust tool.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderConfigurationClosure)(IMGLYSlider * _Nonnull);

/// This closure can be used to configure the view that contains the slider and that is visible when selecting an adjust tool.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);

/// This closure will be called whenever the value of the slider changes. The Slider and the active AdjustTool will be passed as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderChangedValueClosure)(IMGLYSlider * _Nonnull, enum AdjustTool);

/// Returns a newly allocated instance of AdjustToolControllerOptions using the default builder.
///
/// \returns  An instance of <code>AdjustToolControllerOptions
/// </code>.
- (nonnull instancetype)init;

/// Returns a newly allocated instance of AdjustToolControllerOptions using the given builder.
///
/// \param builder A <code>AdjustToolControllerOptionsBuilder
/// </code> instance.
///
/// \returns  An instance of <code>AdjustToolControllerOptions
/// </code>.
- (nonnull instancetype)initWithBuilder:(IMGLYAdjustToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end



/// The default ToolControllerOptionsBuilder for ToolControllerOptions.
SWIFT_CLASS_NAMED("ToolControllerOptionsBuilder")
@interface IMGLYToolControllerOptionsBuilder : NSObject

/// The title of the tool. By default this will be displayed in the secondary toolbar.
@property (nonatomic, copy) NSString * _Nullable title;

/// The tools background color. If this property is nil, the backgroundColor property of the Configuration will be used instead.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;

/// This closure will be called when a tool has been entered.
@property (nonatomic, copy) void (^ _Nullable didEnterToolClosure)(void);

/// The closure will be called when a tool is about to be left.
@property (nonatomic, copy) void (^ _Nullable willLeaveToolClosure)(void);

/// A configuration closure to configure the apply button displayed at the bottom right. Defaults to a checkmark icon.
@property (nonatomic, copy) void (^ _Nullable applyButtonConfigurationClosure)(UIButton * _Nonnull);

/// A configuration closure to configure the discard button displayed at the bottom left. Defaults to a cross icon.
@property (nonatomic, copy) void (^ _Nullable discardButtonConfigurationClosure)(UIButton * _Nonnull);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;


/// The default AdjustToolControllerOptionsBuilder for AdjustToolControllerOptions.
SWIFT_CLASS_NAMED("AdjustToolControllerOptionsBuilder")
@interface IMGLYAdjustToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder

/// This closure allows further configuration of the adjust tool buttons. The closure is called for each adjust tool button and has the button and its corresponding adjust tool as parameters.
@property (nonatomic, copy) void (^ _Nullable adjustToolButtonConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull, enum AdjustTool);

/// This closure is called every time the user selects a tool.
@property (nonatomic, copy) void (^ _Nullable adjustToolSelectedClosure)(enum AdjustTool);

/// This closure can be used to configure the slider that is visible when selecting an adjust tool.
@property (nonatomic, copy) void (^ _Nullable sliderConfigurationClosure)(IMGLYSlider * _Nonnull);

/// This closure can be used to configure the view that contains the slider and that is visible when selecting an adjust tool.
@property (nonatomic, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);

/// This closure will be called whenever the value of the slider changes. The Slider and the active AdjustTool will be passed as parameters.
@property (nonatomic, copy) void (^ _Nullable sliderChangedValueClosure)(IMGLYSlider * _Nonnull, enum AdjustTool);

/// An array of AdjustTool raw values wrapped in NSNumbers. Setting this property overrides any previously set values in allowedAdjustTools with the corresponding AdjustTool values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedAdjustToolsAsNSNumbers;

/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UITouch;
@class UIEvent;
@protocol IMGLYAlphaPickerViewDelegate;


/// The AlphaPickerView class defines a view that can be used to pick an alpha value. It displays a gradient from zero alpha to full alpha. The color of the gradient can be set via color or hue properties. The background is painted with a checkerboard pattern, that is provided by an image called "checkerboard".
SWIFT_CLASS_NAMED("AlphaPickerView")
@interface IMGLYAlphaPickerView : UIView

/// The receiver’s delegate.\See 
///
/// <code>AlphaPickerViewDelegate
/// </code>.
@property (nonatomic, weak) id <IMGLYAlphaPickerViewDelegate> _Nullable pickerDelegate;

/// The currently choosen alpha value of the picker.
@property (nonatomic) CGFloat alphaValue;

/// The currently choosen color value of the color gradient.
@property (nonatomic, strong) UIColor * _Nonnull color;

/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)drawRect:(CGRect)rect;

/// :nodoc:
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// :nodoc:
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// :nodoc:
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// :nodoc:
- (void)layoutSubviews;
@end



/// The AlphaPickerViewDelegate protocol defines a set of optional methods you can use to receive value-change messages for AlphaPickerView objects.
SWIFT_PROTOCOL_NAMED("AlphaPickerViewDelegate")
@protocol IMGLYAlphaPickerViewDelegate

/// Is called when the alpha value changes.
///
/// \param alphaPickerView An instance of <code>AlphaPickerView
/// </code>.
///
/// \param alpha A value between 0.0 and 1.0.
- (void)alphaPicked:(IMGLYAlphaPickerView * _Nonnull)alphaPickerView alpha:(CGFloat)alpha;
@end

@class CAAnimation;


/// AnimationDelegate can be used as the delegate of a CAAnimation to easily specify a completion block.
SWIFT_CLASS_NAMED("AnimationDelegate")
@interface IMGLYAnimationDelegate : NSObject

/// The block that should be executed after a CAAnimation finishes.
@property (nonatomic, readonly, copy) void (^ _Nonnull block)(BOOL);

/// :nodoc:
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
@end

@protocol IMGLYGradientViewDelegate;


/// This class represents the box gradient view. It is used within the focus editor view controller to visualize the choosen focus parameters. Basicaly a box shaped area is left unblured. Two controlpoints define the upper and lower midpoint of that box. Therefore they determin the rotation, position and size of the box.
SWIFT_CLASS_NAMED("BoxGradientView")
@interface IMGLYBoxGradientView : UIView

/// The receiver’s delegate.\See 
///
/// <code>GradientViewDelegate
/// </code>.
@property (nonatomic, weak) id <IMGLYGradientViewDelegate> _Nullable gradientViewDelegate;

/// The center between controlPoint1 and controlPoint2.
@property (nonatomic, readonly) CGPoint centerPoint;

/// The first control point.
@property (nonatomic) CGPoint controlPoint1;

/// The second control point.
@property (nonatomic) CGPoint controlPoint2;

/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)drawRect:(CGRect)rect;

/// :nodoc:
- (void)layoutSubviews;

/// :nodoc:
- (void)accessibilityIncrement;

/// :nodoc:
- (void)accessibilityDecrement;
@end

@class UIGestureRecognizer;

@interface IMGLYBoxGradientView (SWIFT_EXTENSION(imglyKit)) <UIGestureRecognizerDelegate>

/// :nodoc:
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer;
@end

@class GLKView;
enum RecordingMode : NSInteger;
@class NSError;
@class NSURL;
@class IMGLYPhotoEffect;
@class UIImage;


/// The CameraController class provides functions for serveral camera related tasks, including setup, flash control, and such.
SWIFT_CLASS_NAMED("CameraController")
@interface IMGLYCameraController : NSObject

/// An instance of a GLKView that is used to present the preview.
@property (nonatomic, readonly, strong) GLKView * _Nonnull videoPreviewView;

/// The currently active recording mode (i.e. .Photo or .Video). Setting this property before calling setupWithInitialRecordingMode(:) is ignored. The setter asynchronously updates the session, so the getter might not immediately represent the new value. You can observe changes to the value of this property using key-value observing.
@property (nonatomic) enum RecordingMode recordingMode;

/// Called when the running state of the camera changes.
@property (nonatomic, copy) void (^ _Nullable runningStateChangedHandler)(BOOL running);

/// Called when the camera position changes.
@property (nonatomic, copy) void (^ _Nullable cameraPositionChangedHandler)(AVCaptureDevicePosition previousPosition, AVCaptureDevicePosition newPosition);

/// Called when the list of available camera positions was changed.
@property (nonatomic, copy) void (^ _Nullable availableCameraPositionsChangedHandler)(void);

/// Called when any aspect of the flash changes. hasFlash is true if the current camera has a flash. flashMode represents the currently active flash mode. flashAvailable is true if the flash is available for use.
@property (nonatomic, copy) void (^ _Nullable flashChangedHandler)(BOOL hasFlash, AVCaptureFlashMode flashMode, BOOL flashAvailable);

/// Called when any aspect of the torch changes. hasTorch is true if the current camera has a torch. torchMMode represents the currently active torch mode. torchAvailable is true if the torch is available for use.
@property (nonatomic, copy) void (^ _Nullable torchChangedHandler)(BOOL hasTorch, AVCaptureTorchMode torchMode, BOOL torchAvailable);

/// Called when a photo is currently being captured or done being captured.
@property (nonatomic, copy) void (^ _Nullable capturingStillImageHandler)(BOOL capturing);

/// Called when the session is interrupted or the interruption ended. This can happen when switching to a multi-app layout, introduced in iOS 9 for example.
@property (nonatomic, copy) void (^ _Nullable sessionInterruptionHandler)(BOOL interrupted);

/// Called when a runtime error occurs.
@property (nonatomic, copy) void (^ _Nullable sessionRuntimeErrorHandler)(NSError * _Nonnull error);

/// Called when the user did not grant authorization for the camera.
@property (nonatomic, copy) void (^ _Nullable authorizationFailedHandler)(void);

/// Called when video recording starts.
@property (nonatomic, copy) void (^ _Nullable videoRecordingStartedHandler)(void);

/// Called when video recording finishes.
@property (nonatomic, copy) void (^ _Nullable videoRecordingFinishedHandler)(NSURL * _Nonnull fileURL);

/// Called when video recording fails.
@property (nonatomic, copy) void (^ _Nullable videoRecordingFailedHandler)(void);

/// Called each second while a video recording is in progress.
@property (nonatomic, copy) void (^ _Nullable videoRecordingProgressHandler)(NSInteger seconds);

/// Called when the size of the preview image within the videoPreviewView changes
@property (nonatomic, copy) void (^ _Nullable previewFrameChangedHandler)(CGRect previewFrame);

/// Called when the focus point changes.
@property (nonatomic, copy) void (^ _Nullable focusPointChangedHandler)(CGPoint point);

/// Called when the focus mode changes.
@property (nonatomic, copy) void (^ _Nullable focusModeChangedHandler)(AVCaptureFocusMode focusMode, AVCaptureExposureMode exposureMode);

/// Called when the focus gets disabled.
@property (nonatomic, copy) void (^ _Nullable focusDisabledHandler)(void);

/// An array of AVCaptureDevicePosition raw values wrapped in NSNumbers. Setting this property overrides any previously set values in cameraPositions with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cameraPositionsAsNSNumbers;

/// An array of AVCaptureFlashMode raw values wrapped in NSNumbers. Setting this property overrides any previously set values in flashModes with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull flashModesAsNSNumbers;

/// An array of AVCaptureTorchMode raw values wrapped in NSNumbers. Setting this property overrides any previously set values in torchModes with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull torchModesAsNSNumbers;

/// Set to false to disable locking focus when a user taps on the live preview. Default is true.
@property (nonatomic) BOOL tapToFocusEnabled;

/// The effect filter that is applied to the live feed.
@property (nonatomic, strong) IMGLYPhotoEffect * _Nullable photoEffect;

/// The intensity of the filter that is applied to the live feed.
@property (nonatomic) CGFloat photoEffectIntensity;

/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Initializes the camera. This method must be called before calling startCamera(). Any handlers that will be used should be set before calling this method, so that they are called with their initial values.
///
/// \param recordingMode The initial recording mode (e.g. <code>.Photo
/// </code> or <code>.Video
/// </code>) to use when
/// initializing the camera.
///
/// \param error A <code>CameraControllerError
/// </code> or an <code>NSError
/// </code> if setup fails.
- (BOOL)setupWithInitialRecordingMode:(enum RecordingMode)recordingMode error:(NSError * _Nullable * _Null_unspecified)error;

/// Same as setupWithInitialRecordingMode(:) but with an optional completion handler. The completion handler is always invoked on the main thread.
///
/// \param recordingMode The initial recording mode (e.g. <code>.Photo
/// </code> or <code>.Video
/// </code>) to use when
/// initializing the camera.
///
/// \param completion A block to be executed when the camera has finished initialization.
///
/// \param error A <code>CameraControllerError
/// </code> or an <code>NSError
/// </code> if setup fails.
- (BOOL)setupWithInitialRecordingMode:(enum RecordingMode)recordingMode error:(NSError * _Nullable * _Null_unspecified)error completion:(void (^ _Nullable)(void))completion;

/// Starts the camera. setupWithInitialRecordingMode(:) must be called before calling this method, otherwise this method does nothing. You should also add the videoPreviewView to your view hierachy to see the camera output.
- (void)startCamera;

/// Stops the camera.
- (void)stopCamera;

/// Switches the camera to the other position (e.g. .Back -> .Front and .Front -> .Back)
- (void)toggleCameraPosition;

/// Switches the camera to the desired position (if available).
///
/// \param position The position to switch to.
- (void)switchToCameraAtPosition:(AVCaptureDevicePosition)position;

/// Takes a photo and hands it over to the completion block. The completion block always runs on the main thread.
///
/// \param completion A completion block that has an image and an error as parameters.
/// If the image was taken sucessfully the error is nil.
- (void)takePhoto:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;

/// Starts the video recording. This only works if recordingMode is set to .Video. You should set appropriate blocks for videoRecordingStartedHandler, videoRecordingFailedHandler, videoRecordingFinishedHandler and videoRecordingProgressHandler. The finished handler gets passed a NSURL to the path of the recorded video file. Please note that you are responsible for deleting that file when you no longer need it.
- (void)startVideoRecording;

/// Stops video recording. This only works if you previously started video recording.
- (void)stopVideoRecording;

/// Selects the next light mode. The order is taken from flashModes or torchModes depending on which is active. If the current device does not support a light mode, the next light mode that is supported is used or .Off.
- (void)selectNextLightMode;

/// :nodoc:
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSString *, id> * _Nullable)change context:(void * _Null_unspecified)context;
@end


/// This enum holds types of errors that occur while using the CameraController.
///
/// <ul><li>MultipleCallsToSetup:            Indicates that setup is called multiple times.</li><li>UnableToInitializeCaptureDevice: Indicates that the capture device can't be initialized.</li></ul>
typedef SWIFT_ENUM(NSInteger, CameraControllerError) {

/// Indicates that setup is called multiple times.
  CameraControllerErrorMultipleCallsToSetup = 0,

/// Indicates that the capture device can't be initialized.
  CameraControllerErrorUnableToInitializeCaptureDevice = 1,
};
static NSString * _Nonnull const CameraControllerErrorDomain = @"imglyKit.CameraControllerError";

@class UILabel;
@class UIControl;
@class UISwipeGestureRecognizer;
@class IMGLYFilterSelectionController;
@class VideoRecordButton;


/// The CameraViewController class provides a dialog to perform serveral tasks regarding the camera. These include taking photos, switching on the flash, and such.
SWIFT_CLASS_NAMED("CameraViewController")
@interface IMGLYCameraViewController : UIViewController

/// Initializes a camera view controller using the given parameters.
///
/// <em>Discussion</em>
///
/// If you use the standard <code>init
/// </code> method or <code>initWithCoder
/// </code> to initialize a <code>CameraViewController
/// </code> object, a camera view controller with all supported recording modes and the default configuration is created.
///
/// \param configuration An <code>Configuration
/// </code> object.
///
/// \returns  And initialized <code>CameraViewController
/// </code>.
- (nonnull instancetype)initWithConfiguration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// The view that contains the background views.
@property (nonatomic, readonly, strong) UIView * _Nonnull backgroundContainerView;

/// The view that contains all view positioned at the top of the screen.
@property (nonatomic, readonly, strong) UIView * _Nonnull topControlsView;

/// The view that serves as container for the actual preview.
@property (nonatomic, readonly, strong) UIView * _Nonnull cameraPreviewContainer;

/// The view that contains all view positioned at the bottom of the screen.
@property (nonatomic, readonly, strong) UIView * _Nonnull bottomControlsView;

/// The view that contains actions button that is used to initiate the photo capturing process.
@property (nonatomic, readonly, strong) UIView * _Nonnull actionButtonContainer;

/// The label that is used to display the current recording time.
@property (nonatomic, readonly, strong) UILabel * _Nonnull recordingTimeLabel;

/// The button that is used to initiate the photo capturing process.
@property (nonatomic, readonly, strong) UIControl * _Nullable actionButton;

/// The view that is used to select the current filter that is applied to the preview.
@property (nonatomic, readonly, strong) UIButton * _Nonnull filterSelectionButton;

/// The slider that is used to control the inensity of the previewed filter.
@property (nonatomic, readonly, strong) IMGLYSlider * _Nonnull filterIntensitySlider;

/// The recognizer that detects a swipe gesture to the right.
@property (nonatomic, readonly, strong) UISwipeGestureRecognizer * _Nonnull swipeRightGestureRecognizer;

/// The recognizer that detects a swipe gesture to the left.
@property (nonatomic, readonly, strong) UISwipeGestureRecognizer * _Nonnull swipeLeftGestureRecognizer;

/// The instance of a FilterSelectionController that is used to select the current preview filter.
@property (nonatomic, readonly, strong) IMGLYFilterSelectionController * _Nonnull filterSelectionController;

/// The camera controller that is used by the controller.
@property (nonatomic, readonly, strong) IMGLYCameraController * _Nullable cameraController;

/// The block that is called once the capture process has finished.
@property (nonatomic, copy) void (^ _Nullable completionBlock)(UIImage * _Nullable, NSURL * _Nullable);

/// :nodoc:
- (void)viewDidLoad;

/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;

/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;

/// :nodoc:
- (BOOL)shouldAutomaticallyForwardAppearanceMethods;

/// :nodoc:
- (UIStatusBarStyle)preferredStatusBarStyle;

/// :nodoc:
- (BOOL)prefersStatusBarHidden;

/// :nodoc:
- (BOOL)shouldAutorotate;

/// :nodoc:
- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation;

/// This function gets the most recent image form the camera roll, and sets it as preview image for the according button.
- (void)setLastImageFromRollAsPreview;

/// Takes a photo.
///
/// \param sender The object that initiated the request.
- (void)takePhoto:(UIButton * _Nullable)sender;

/// Toggles video recording.
///
/// \param sender Sender of the event.
- (void)recordVideo:(VideoRecordButton * _Nullable)sender;
@end


@interface IMGLYCameraViewController (SWIFT_EXTENSION(imglyKit)) <UIGestureRecognizerDelegate>

/// :nodoc:
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch;
@end

@class UIImagePickerController;

@interface IMGLYCameraViewController (SWIFT_EXTENSION(imglyKit)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>

/// :nodoc:
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *, id> * _Nonnull)info;

/// :nodoc:
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
@end

@class IMGLYToolStackController;


/// The ToolStackControllerDelegate protocol defines methods that allow you respond to the events of an instance of ToolStackController.
SWIFT_PROTOCOL_NAMED("ToolStackControllerDelegate")
@protocol IMGLYToolStackControllerDelegate

/// Called when the tool stack controller is done and an output image could be generated.
///
/// \param toolStackController The tool stack controller that finished.
///
/// \param image The output image.
- (void)toolStackController:(IMGLYToolStackController * _Nonnull)toolStackController didFinishWithImage:(UIImage * _Nonnull)image;

/// Called when the user wants to dismiss the tool stack controller without applying the changes.
///
/// \param toolStackController The tool stack controller that should be dismissed.
- (void)toolStackControllerDidCancel:(IMGLYToolStackController * _Nonnull)toolStackController;

/// Called when generating an output image failed.
///
/// \param toolStackController The tool stack controller that could not generate the output image.
- (void)toolStackControllerDidFail:(IMGLYToolStackController * _Nonnull)toolStackController;
@end


@interface IMGLYCameraViewController (SWIFT_EXTENSION(imglyKit)) <IMGLYToolStackControllerDelegate>

/// :nodoc:
- (void)toolStackController:(IMGLYToolStackController * _Nonnull)toolStackController didFinishWithImage:(UIImage * _Nonnull)image;

/// :nodoc:
- (void)toolStackControllerDidFail:(IMGLYToolStackController * _Nonnull)toolStackController;

/// :nodoc:
- (void)toolStackControllerDidCancel:(IMGLYToolStackController * _Nonnull)toolStackController;
@end



/// Options for configuring a CameraViewController.
SWIFT_CLASS_NAMED("CameraViewControllerOptions")
@interface IMGLYCameraViewControllerOptions : NSObject

/// The views background color. In video mode the colors alpha value is reduced to 0.3. Defaults to the global background color.
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;

/// Use this closure to configure the flash button.
@property (nonatomic, readonly, copy) void (^ _Nullable flashButtonConfigurationClosure)(UIButton * _Nonnull);

/// Use this closure to configure the switch camera button.
@property (nonatomic, readonly, copy) void (^ _Nullable switchCameraButtonConfigurationClosure)(UIButton * _Nonnull);

/// Use this closure to configure the camera roll button.
@property (nonatomic, readonly, copy) void (^ _Nullable cameraRollButtonConfigurationClosure)(UIButton * _Nonnull);

/// Use this closure to configure the action button in photo mode.
@property (nonatomic, readonly, copy) void (^ _Nullable photoActionButtonConfigurationClosure)(UIButton * _Nonnull);

/// Use this closure to configure the filter selector button.
@property (nonatomic, readonly, copy) void (^ _Nullable filterSelectorButtonConfigurationClosure)(UIButton * _Nonnull);

/// Use this closure to configure the timelabel.
@property (nonatomic, readonly, copy) void (^ _Nullable timeLabelConfigurationClosure)(UILabel * _Nonnull);

/// Use this closure to configure the filter intensity slider.
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(IMGLYSlider * _Nonnull);

/// Use this closure to configure the given recording mode button. By default the buttons light up in yellow, when selected.
@property (nonatomic, readonly, copy) void (^ _Nullable recordingModeButtonConfigurationClosure)(UIButton * _Nonnull, enum RecordingMode);

/// Enable/Disable permanent crop to square. Disabled by default.
@property (nonatomic, readonly) BOOL cropToSquare;

/// The maximum length of a video. If set to 0 the length is unlimited.
@property (nonatomic, readonly) NSInteger maximumVideoLength;

/// Enable/Disable tap to focus on the camera preview image. Enabled by default.
@property (nonatomic, readonly) BOOL tapToFocusEnabled;

/// Show/Hide the camera roll button. Enabled by default.
@property (nonatomic, readonly) BOOL showCameraRoll;

/// Enable/Disable filter bottom drawer. Enabled by default.
@property (nonatomic, readonly) BOOL showFilters;

/// Enable/Disable filter intensity slider.
@property (nonatomic, readonly) BOOL showFilterIntensitySlider;

/// The initial intensity of the filters.
@property (nonatomic, readonly) CGFloat initialFilterIntensity;
@end



/// The default CameraViewControllerOptionsBuilder for CameraViewControllerOptions.
SWIFT_CLASS_NAMED("CameraViewControllerOptionsBuilder")
@interface IMGLYCameraViewControllerOptionsBuilder : NSObject

/// The views background color. In video mode the colors alpha value is reduced to 0.3. Defaults to the global background color.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;

/// Use this closure to configure the flash button. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable flashButtonConfigurationClosure)(UIButton * _Nonnull);

/// Use this closure to configure the switch camera button. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable switchCameraButtonConfigurationClosure)(UIButton * _Nonnull);

/// Use this closure to configure the camera roll button. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable cameraRollButtonConfigurationClosure)(UIButton * _Nonnull);

/// Use this closure to configure the action button in photo mode. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable photoActionButtonConfigurationClosure)(UIButton * _Nonnull);

/// Use this closure to configure the filter selector button. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable filterSelectorButtonConfigurationClosure)(UIButton * _Nonnull);

/// Use this closure to configure the timelabel. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable timeLabelConfigurationClosure)(UILabel * _Nonnull);

/// Use this closure to configure the filter intensity slider. Defaults to an empty implementation.
@property (nonatomic, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(IMGLYSlider * _Nonnull);

/// Use this closure to configure the given recording mode button. By default the buttons light up in yellow, when selected.
@property (nonatomic, copy) void (^ _Nullable recordingModeButtonConfigurationClosure)(UIButton * _Nonnull, enum RecordingMode);

/// Enable/Disable permanent crop to square. Disabled by default.
@property (nonatomic) BOOL cropToSquare;

/// The maximum length of a video. If set to 0 the length is unlimited.
@property (nonatomic) NSInteger maximumVideoLength;

/// Enable/Disable tap to focus on the camera preview image. Enabled by default.
@property (nonatomic) BOOL tapToFocusEnabled;

/// Show/Hide the camera roll button. Enabled by default.
@property (nonatomic) BOOL showCameraRoll;

/// Enable/Disable filter bottom drawer. Enabled by default.
@property (nonatomic) BOOL showFilters;

/// Enable/Disable filter intensity slider.
@property (nonatomic) BOOL showFilterIntensitySlider;

/// The initial intensity of the filters.
@property (nonatomic) CGFloat initialFilterIntensity;

/// An array of AVCaptureDevicePosition raw values wrapped in NSNumbers. Setting this property overrides any previously set values in allowedCameraPositions with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedCameraPositionsAsNSNumbers;

/// An array of AVCaptureFlashMode raw values wrapped in NSNumbers. Setting this property overrides any previously set values in allowedFlashModes with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedFlashModesAsNSNumbers;

/// An array of AVCaptureTorchMode raw values wrapped in NSNumbers. Setting this property overrides any previously set values in allowedFlashModes with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTorchModesAsNSNumbers;

/// An array of RecordingMode raw values wrapped in NSNumbers. Setting this property overrides any previously set values in allowedRecordingModes with the corresponding unwrapped values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedRecordingModesAsNSNumbers;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// This class represents the circle gradient view. It is used within the focus editor view controller to visualize the choosen focus parameters. Basicaly a circle shaped area is left unblured. Two controlpoints define two opposing points on the frame of the induced circle. Therefore they determin the rotation, position and size of the circle.
SWIFT_CLASS_NAMED("CircleGradientView")
@interface IMGLYCircleGradientView : UIView

/// The center point between controlPoint1 and controlPoint2.
@property (nonatomic, readonly) CGPoint centerPoint;

/// The receiver’s delegate.\See 
///
/// <code>GradientViewDelegate
/// </code>.
@property (nonatomic, weak) id <IMGLYGradientViewDelegate> _Nullable gradientViewDelegate;

/// The first control point.
@property (nonatomic) CGPoint controlPoint1;

/// The second control point.
@property (nonatomic) CGPoint controlPoint2;

/// The normalized first control point.
@property (nonatomic, readonly) CGPoint normalizedControlPoint1;

/// The normalized second control point.
@property (nonatomic, readonly) CGPoint normalizedControlPoint2;

/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Initially initializes both control points and calculates the center between them.
- (void)configureControlPoints;

/// Adds a pan gesture recognizer to the circle gradient view.
- (void)configurePanGestureRecognizer;

/// Adds a pinch gesture recognizer to the circle gradient view.
- (void)configurePinchGestureRecognizer;

/// :nodoc:
- (void)drawRect:(CGRect)rect;

/// :nodoc:
- (void)layoutSubviews;

/// :nodoc:
- (void)accessibilityIncrement;

/// :nodoc:
- (void)accessibilityDecrement;
@end

@class CIImage;


/// Applies clarity to an instance of CIImage.
SWIFT_CLASS_NAMED("ClarityFilter")
@interface IMGLYClarityFilter : CIFilter

/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;

/// The intensity of this filter.
@property (nonatomic, strong) NSNumber * _Nullable inputIntensity;

/// :nodoc:
- (void)setDefaults;

/// :nodoc:
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/// A ColorButtonImageGenerator can be used to generate an image that overlays a colored image above a background image.
SWIFT_CLASS_NAMED("ColorButtonImageGenerator")
@interface IMGLYColorButtonImageGenerator : NSObject

/// Returns a new instance of a ColorButtonImageGenerator.
///
/// \param imageName An image defining the shape of the selected color indicator.
///
/// \param backgroundImageName An image definint the background.
///
/// \returns  A new instance.
- (nonnull instancetype)initWithImageName:(NSString * _Nonnull)imageName backgroundImageName:(NSString * _Nonnull)backgroundImageName OBJC_DESIGNATED_INITIALIZER;

/// Returns a new image made of the combined back- and color image.
///
/// \param color The color that the color indicator image is set to.
///
/// \returns  A new <code>UIImage
/// </code>.
- (UIImage * _Nullable)imageWithColor:(UIColor * _Nonnull)color;
@end

@class UIImageView;


/// A ColorCollectionViewCell is a cell that shows a solid color and an image view on top of that color when the cell is selected. It also has a selectionIndicator to show whether or not the cell is currently selected.
SWIFT_CLASS_NAMED("ColorCollectionViewCell")
@interface IMGLYColorCollectionViewCell : UICollectionViewCell

/// A view that represents a solid color.
@property (nonatomic, readonly, strong) UIView * _Nonnull colorView;

/// An image view that is above the solid color and only visible when the cell is selected.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;

/// A selection indicator at the bottom of the cell.
@property (nonatomic, readonly, strong) UIView * _Nonnull selectionIndicator;

/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)prepareForReuse;

/// :nodoc:
@property (nonatomic, getter=isSelected) BOOL selected;

/// :nodoc:
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end

@protocol IMGLYColorPickerViewDelegate;


/// The ColorPickerView class provides a class that is used to pick colors. It contains three elements. A hue-picker, a brightness-saturation-picker and a preview of the picked color.
SWIFT_CLASS_NAMED("ColorPickerView")
@interface IMGLYColorPickerView : UIView

/// The receiver’s delegate.\See 
///
/// <code>ColorPickerViewDelegate
/// </code>.
@property (nonatomic, weak) id <IMGLYColorPickerViewDelegate> _Nullable pickerDelegate;

/// The currently selected color.
@property (nonatomic, strong) UIColor * _Nonnull color;

/// The initial set color.
@property (nonatomic, strong) UIColor * _Nonnull initialColor;

/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYColorPickerView (SWIFT_EXTENSION(imglyKit)) <IMGLYAlphaPickerViewDelegate>

/// :nodoc:
- (void)alphaPicked:(IMGLYAlphaPickerView * _Nonnull)alphaPickerView alpha:(CGFloat)alpha;
@end

@class IMGLYSaturationBrightnessPickerView;


/// The SaturationBrightnessPickerViewDelegate protocol defines methods that allow you respond to the events of an instance of SaturationBrightnessPickerView.
SWIFT_PROTOCOL_NAMED("SaturationBrightnessPickerViewDelegate")
@protocol IMGLYSaturationBrightnessPickerViewDelegate

/// Called when a saturation brightness picker view picked a color.
///
/// \param saturationBrightnessPickerView The saturation brightness picker view that picked a color.
///
/// \param color The color that was picked.
- (void)colorPicked:(IMGLYSaturationBrightnessPickerView * _Nonnull)saturationBrightnessPickerView didPickColor:(UIColor * _Nonnull)color;
@end


@interface IMGLYColorPickerView (SWIFT_EXTENSION(imglyKit)) <IMGLYSaturationBrightnessPickerViewDelegate>

/// :nodoc:
- (void)colorPicked:(IMGLYSaturationBrightnessPickerView * _Nonnull)saturationBrightnessPickerView didPickColor:(UIColor * _Nonnull)color;
@end

@class IMGLYHuePickerView;


/// The HuePickerViewDelegate will be used to broadcast changes of the picked hue.
SWIFT_PROTOCOL_NAMED("HuePickerViewDelegate")
@protocol IMGLYHuePickerViewDelegate

/// Called when a hue was picked.
///
/// \param huePickerView The hue picker view that changed its <code>hue
/// </code> value.
///
/// \param hue The new hue value.
- (void)huePicked:(IMGLYHuePickerView * _Nonnull)huePickerView hue:(CGFloat)hue;
@end


@interface IMGLYColorPickerView (SWIFT_EXTENSION(imglyKit)) <IMGLYHuePickerViewDelegate>

/// :nodoc:
- (void)huePicked:(IMGLYHuePickerView * _Nonnull)huePickerView hue:(CGFloat)hue;
@end



/// The ColorPickerViewDelegate protocol defines a set of optional methods you can use to receive value-change messages for ColorPickerViewDelegate objects.
SWIFT_PROTOCOL_NAMED("ColorPickerViewDelegate")
@protocol IMGLYColorPickerViewDelegate

/// Is called when a color has been picked.
///
/// \param colorPickerView The sender of the event.
///
/// \param color The picked color value.
- (void)colorPicked:(IMGLYColorPickerView * _Nonnull)colorPickerView didPickColor:(UIColor * _Nonnull)color;

/// Is called when the picking process has been cancled.
///
/// \param colorPickerView The sender of the event.
- (void)canceledColorPicking:(IMGLYColorPickerView * _Nonnull)colorPickerView;
@end

@class IMGLYPhotoEditViewControllerOptions;
@class IMGLYFilterToolControllerOptions;
@class IMGLYStickerToolControllerOptions;
@class IMGLYFrameToolControllerOptions;
@class IMGLYOrientationToolControllerOptions;
@class IMGLYFocusToolControllerOptions;
@class IMGLYCropToolControllerOptions;
@class IMGLYTextToolControllerOptions;
@class IMGLYToolStackControllerOptions;
@class IMGLTextOptionsToolControllerOptions;
@class IMGLYTextFontToolControllerOptions;
@class IMGLYTextColorToolControllerOptions;
@class IMGLYConfigurationBuilder;


/// An Configuration defines behaviour and look of all view controllers provided by the imglyKit. It uses the builder pattern to create an immutable object via a closure. To configure the different editors and viewControllers contained in the SDK, edit their options in the corresponding configure*ViewController method of the ConfigurationBuilder.
SWIFT_CLASS_NAMED("Configuration")
@interface IMGLYConfiguration : NSObject

/// The background color. Defaults to black.
@property (nonatomic, readonly, strong) UIColor * _Nonnull backgroundColor;

/// The color of the separator that is drawn to separate different menu items.
@property (nonatomic, readonly, strong) UIColor * _Nonnull separatorColor;

/// The background color of the context menu.
@property (nonatomic, readonly, strong) UIColor * _Nonnull contextMenuBackgroundColor;

/// Options for the CameraViewController.
@property (nonatomic, readonly, strong) IMGLYCameraViewControllerOptions * _Nonnull cameraViewControllerOptions;

/// Options for the PhotoEditViewController.
@property (nonatomic, readonly, strong) IMGLYPhotoEditViewControllerOptions * _Nonnull photoEditViewControllerOptions;

/// Options for the FilterEditorViewController.
@property (nonatomic, readonly, strong) IMGLYFilterToolControllerOptions * _Nonnull filterToolControllerOptions;

/// Options for the StickersEditorViewController.
@property (nonatomic, readonly, strong) IMGLYStickerToolControllerOptions * _Nonnull stickerToolControllerOptions;

/// Options for the FrameEditorViewController.
@property (nonatomic, readonly, strong) IMGLYFrameToolControllerOptions * _Nonnull frameToolControllerOptions;

/// Options for the OrientationEditorViewController.
@property (nonatomic, readonly, strong) IMGLYOrientationToolControllerOptions * _Nonnull orientationToolControllerOptions;

/// Options for the FocusEditorViewController.
@property (nonatomic, readonly, strong) IMGLYFocusToolControllerOptions * _Nonnull focusToolControllerOptions;

/// Options for the CropToolControllerOptions.
@property (nonatomic, readonly, strong) IMGLYCropToolControllerOptions * _Nonnull cropToolControllerOptions;

/// Options for the TextEditorViewController.
@property (nonatomic, readonly, strong) IMGLYTextToolControllerOptions * _Nonnull textToolControllerOptions;

/// Options for the ToolStackController.
@property (nonatomic, readonly, strong) IMGLYToolStackControllerOptions * _Nonnull toolStackControllerOptions;

/// Options for the TextOptionsToolController.
@property (nonatomic, readonly, strong) IMGLTextOptionsToolControllerOptions * _Nonnull textOptionsToolControllerOptions;

/// Options for the TextFontToolControllerOptions.
@property (nonatomic, readonly, strong) IMGLYTextFontToolControllerOptions * _Nonnull textFontToolControllerOptions;

/// Options for the TextColorToolControllerOptions.
@property (nonatomic, readonly, strong) IMGLYTextColorToolControllerOptions * _Nonnull textColorToolControllerOptions;

/// Options for the AdjustToolControllerOptions.
@property (nonatomic, readonly, strong) IMGLYAdjustToolControllerOptions * _Nonnull adjustToolControllerOptions;

/// Returns a newly allocated instance of a Configuration using the given builder.
///
/// \param builder A <code>ConfigurationBuilder
/// </code> instance.
///
/// \returns  An instance of a <code>Configuration
/// </code>.
- (nonnull instancetype)initWithBuilder:(void (^ _Nonnull)(IMGLYConfigurationBuilder * _Nonnull))builder OBJC_DESIGNATED_INITIALIZER;
@end

@class IMGLYPhotoEditViewControllerOptionsBuilder;
@class IMGLYFilterToolControllerOptionsBuilder;
@class IMGLYStickerToolControllerOptionsBuilder;
@class IMGLYOrientationToolControllerOptionsBuilder;
@class IMGLYFocusToolControllerOptionsBuilder;
@class IMGLYCropToolControllerOptionsBuilder;
@class IMGLYTextToolControllerOptionsBuilder;
@class IMGLYFrameToolControllerOptionsBuilder;
@class IMGLYToolStackControllerOptionsBuilder;
@class IMGLYTextOptionsToolControllerOptionsBuilder;
@class IMGLYTextFontToolControllerOptionsBuilder;
@class IMGLYTextColorToolControllerOptionsBuilder;


/// The configuration builder object offers all properties of Configuration in a mutable version, in order to build an immutable Configuration object. To further configure the different viewcontrollers, use the configureXYZViewController methods to edit the given options.
SWIFT_CLASS_NAMED("ConfigurationBuilder")
@interface IMGLYConfigurationBuilder : NSObject

/// The background color. Defaults to black.
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;

/// The color of the separator that is drawn to separate different menu items
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;

/// The background color of the context menu.
@property (nonatomic, strong) UIColor * _Nonnull contextMenuBackgroundColor;

/// Options for the CameraViewController.
- (void)configureCameraViewController:(void (^ _Nonnull)(IMGLYCameraViewControllerOptionsBuilder * _Nonnull))builder;

/// Options for the PhotoEditorViewController.
- (void)configurePhotoEditorViewController:(void (^ _Nonnull)(IMGLYPhotoEditViewControllerOptionsBuilder * _Nonnull))builder;

/// Options for the FilterToolController.
- (void)configureFilterToolController:(void (^ _Nonnull)(IMGLYFilterToolControllerOptionsBuilder * _Nonnull))builder;

/// Options for the StickerToolController.
- (void)configureStickerToolController:(void (^ _Nonnull)(IMGLYStickerToolControllerOptionsBuilder * _Nonnull))builder;

/// Options for the OrientationToolController.
- (void)configureOrientationToolController:(void (^ _Nonnull)(IMGLYOrientationToolControllerOptionsBuilder * _Nonnull))builder;

/// Options for the FocusToolController.
- (void)configureFocusToolController:(void (^ _Nonnull)(IMGLYFocusToolControllerOptionsBuilder * _Nonnull))builder;

/// Options for the CropToolController.
- (void)configureCropToolController:(void (^ _Nonnull)(IMGLYCropToolControllerOptionsBuilder * _Nonnull))builder;

/// Options for the TextToolController.
- (void)configureTextToolController:(void (^ _Nonnull)(IMGLYTextToolControllerOptionsBuilder * _Nonnull))builder;

/// Options for the FrameToolController.
- (void)configureFrameToolController:(void (^ _Nonnull)(IMGLYFrameToolControllerOptionsBuilder * _Nonnull))builder;

/// Options for the ToolStackController.
- (void)configureToolStackController:(void (^ _Nonnull)(IMGLYToolStackControllerOptionsBuilder * _Nonnull))builder;

/// Options for the TextOptionsToolController.
- (void)configureTextOptionsToolController:(void (^ _Nonnull)(IMGLYTextOptionsToolControllerOptionsBuilder * _Nonnull))builder;

/// Options for the TextFontToolController.
- (void)configureTextFontToolController:(void (^ _Nonnull)(IMGLYTextFontToolControllerOptionsBuilder * _Nonnull))builder;

/// Options for the TextColorToolController.
- (void)configureTextColorToolController:(void (^ _Nonnull)(IMGLYTextColorToolControllerOptionsBuilder * _Nonnull))builder;

/// Options for the AdjustToolController.
- (void)configureAdjustToolController:(void (^ _Nonnull)(IMGLYAdjustToolControllerOptionsBuilder * _Nonnull))builder;

/// Use this to use a specific subclass instead of the default imglyKit view controller classes. This works across all the whole framework and allows you to subclass all usages of a class. As of now, only view controller can be replaced!
///
/// \param builtinClass The built in class, that should be replaced.
///
/// \param replacingClass The class that replaces the builtin class.
///
/// \param namespace The namespace of the replacing class (e.g. Your_App). Usually
/// the module name of your app. Can be found under 'Product Module Name'
/// in your app targets build settings.
///
/// \param error An exception if the replacing class is not a subclass of the replaced class.
- (BOOL)replaceClass:(SWIFT_METATYPE(NSObject) _Nonnull)builtinClass replacingClass:(SWIFT_METATYPE(NSObject) _Nonnull)replacingClass namespace:(NSString * _Nonnull)namespace_ error:(NSError * _Nullable * _Null_unspecified)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A ContextMenuAction object represents an action that can be taken when tapping a button in a context menu. You use this class to configure information about a single action, including the image, and a handler to execute when the user taps the button. After creating an context menu action object, add it to a ContextMenuController object before displaying the corresponding context menu to the user.
SWIFT_CLASS_NAMED("ContextMenuAction")
@interface IMGLYContextMenuAction : NSObject

/// The image of the action's button. (read-only)
@property (nonatomic, readonly, strong) UIImage * _Nonnull image;

/// Create and return an action with the specified image and behavior.
///
/// \param image The image to use for this button.
///
/// \param handler A block to execute when the user selects the action. This block has no return value and takes the selected action object as its only parameter.
///
/// \returns  A new context menu action object.
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image handler:(void (^ _Nonnull)(IMGLYContextMenuAction * _Nonnull))handler OBJC_DESIGNATED_INITIALIZER;
@end



/// A ContextMenuController object displays a context menu to the user. After configuring the context menu controller with the actions you want, present it using the presentViewController:animated:completion: method.
SWIFT_CLASS_NAMED("ContextMenuController")
@interface IMGLYContextMenuController : UIViewController

/// The actions that the user can take in the context menu. (read-only)
@property (nonatomic, readonly, copy) NSArray<IMGLYContextMenuAction *> * _Nonnull actions;

/// The background color of the context menu.
@property (nonatomic, strong) UIColor * _Nullable menuColor;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)loadView;

/// :nodoc:
- (BOOL)prefersStatusBarHidden;

/// Attaches an action object to the context menu.
///
/// \param action The action object to display as part of the context menu. Actions are displayed as buttons in the context menu.
- (void)addAction:(IMGLYContextMenuAction * _Nonnull)action;
@end



/// A ContextMenuDividerAction is a special kind of ContextMenuAction. It takes no arguments and is displayed as a visual divider in a context menu controller.
SWIFT_CLASS_NAMED("ContextMenuDividerAction")
@interface IMGLYContextMenuDividerAction : IMGLYContextMenuAction

/// Create and return an action that displays a visual divider in a context menu controller.
///
/// \returns  A new context menu action object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UIContentContainer;


/// A ContextMenuPresentationController handles the presentation of a ContextMenuController. In nearly all cases you use this class as-is and do not create instances of it directly. imglyKit creates an instance of this class automatically when you present a context menu controller.
SWIFT_CLASS_NAMED("ContextMenuPresentationController")
@interface IMGLYContextMenuPresentationController : UIPresentationController

/// An array of views that the user can interact with while the context menu is visible.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull passthroughViews;

/// :nodoc:
- (CGSize)sizeForChildContentContainer:(id <UIContentContainer> _Nonnull)container withParentContainerSize:(CGSize)parentSize;

/// :nodoc:
- (CGRect)frameOfPresentedViewInContainerView;

/// :nodoc:
- (void)containerViewWillLayoutSubviews;

/// :nodoc:
- (void)presentationTransitionWillBegin;

/// :nodoc:
- (void)presentationTransitionDidEnd:(BOOL)completed;
- (nonnull instancetype)initWithPresentedViewController:(UIViewController * _Nonnull)presentedViewController presentingViewController:(UIViewController * _Nonnull)presentingViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Instances of this class can be used together with the CropEditorViewController to specify the crop ratios that should be supported.
SWIFT_CLASS_NAMED("CropRatio")
@interface IMGLYCropRatio : NSObject

/// The ratio of the crop as NSNumber. This should only be used with Objective-C because primitives can't be nil.
@property (nonatomic, readonly, strong) NSNumber * _Nullable ratioAsNSNumber;

/// A name to be shown in the UI.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;

/// An icon to be shown in the UI.
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;

/// Initializes and returns a newly allocated crop ratio object with the specified ratio, title and icon. This initializer should only be used with Objective-C because primitives can't be nil.
///
/// \param ratio The aspect ratio to enforce. If this is <code>nil
/// </code>, the user can perform a free form crop.
///
/// \param title The title of this aspect ratio, e.g. '1:1'
///
/// \param icon The icon to use for this aspect ratio. The image should be 36x36 pixels.
///
/// \returns  An initialized crop ratio object.
- (nonnull instancetype)initWithRatio:(NSNumber * _Nullable)ratio title:(NSString * _Nonnull)title accessibilityLabel:(NSString * _Nullable)accessibilityLabel icon:(UIImage * _Nullable)icon OBJC_DESIGNATED_INITIALIZER;
@end



/// A CropRectComponent holds all the logic for the cropping view.
SWIFT_CLASS_NAMED("CropRectComponent")
@interface IMGLYCropRectComponent : NSObject

/// The currently visible cropping area.
@property (nonatomic) CGRect cropRect;

/// The top left anchor image view.
@property (nonatomic, strong) UIImageView * _Nullable topLeftAnchor;

/// The top right anchor image view.
@property (nonatomic, strong) UIImageView * _Nullable topRightAnchor;

/// The bottom left anchor image view.
@property (nonatomic, strong) UIImageView * _Nullable bottomLeftAnchor;

/// The bottom right anchor image view.
@property (nonatomic, strong) UIImageView * _Nullable bottomRightAnchor;

/// Call this in viewDidLoad.
///
/// \param transparentView A view that is userd as transperent overlay.
///
/// \param parentView The parent view.
///
/// \param showAnchors A bool that determines whether the anchors are visible or not.
- (void)setup:(UIView * _Nonnull)transparentView parentView:(UIView * _Nonnull)parentView showAnchors:(BOOL)showAnchors;

/// Call this in viewDidAppear.
- (void)present;

/// Initially lays out all needed views for the crop rect.
- (void)layoutViewsForCropRect;

/// Makes all views visible.
- (void)showViews;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A CropToolController is reponsible for displaying the UI to crop an image.
SWIFT_CLASS_NAMED("CropToolController")
@interface IMGLYCropToolController : IMGLYPhotoEditToolController

/// The currently active selection mode.
@property (nonatomic, strong) IMGLYCropRatio * _Nullable selectionMode;

/// :nodoc:
- (void)viewDidLoad;

/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;

/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;

/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;

/// :nodoc:
@property (nonatomic, readonly) CGFloat preferredDefaultPreviewViewScale;

/// :nodoc:
- (void)didBecomeActiveTool;

/// :nodoc:
- (void)willResignActiveTool;
- (nonnull instancetype)initWithPhotoEditModel:(IMGLYPhotoEditMutableModel * _Nonnull)photoEditModel configuration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYCropToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>

/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
@end


@interface IMGLYCropToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>

/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYCropToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>

/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;

/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;

/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end



/// Options for configuring a CropToolController.
SWIFT_CLASS_NAMED("CropToolControllerOptions")
@interface IMGLYCropToolControllerOptions : IMGLYToolControllerOptions

/// Defines all allowed crop ratios. The crop ratio buttons are shown in the given order. Defaults to Free, 1:1, 4:3 and 16:9. Setting this to an empty array is ignored.
@property (nonatomic, readonly, copy) NSArray<IMGLYCropRatio *> * _Nonnull allowedCropRatios;

/// This closure allows further configuration of the crop ratio buttons. The closure is called for each crop ratio button and has the button and its corresponding crop ratio as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable cropRatioButtonConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull, IMGLYCropRatio * _Nonnull);

/// This closure is called every time the user selects a crop ratio.
@property (nonatomic, readonly, copy) void (^ _Nullable cropRatioSelectedClosure)(IMGLYCropRatio * _Nonnull);

/// Returns a newly allocated instance of a CropToolControllerOptions using the default builder.
///
/// \returns  An instance of a <code>CropToolControllerOptions
/// </code>.
- (nonnull instancetype)init;

/// Returns a newly allocated instance of a CropToolControllerOptions using the given builder.
///
/// \param builder A <code>CropToolControllerOptionsBuilder
/// </code> instance.
///
/// \returns  An instance of a <code>CropToolControllerOptions
/// </code>.
- (nonnull instancetype)initWithBuilder:(IMGLYCropToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end



/// The default CropToolControllerOptionsBuilder for CropToolControllerOptions.
SWIFT_CLASS_NAMED("CropToolControllerOptionsBuilder")
@interface IMGLYCropToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder

/// Defines all allowed crop ratios. The crop ratio buttons are shown in the given order. Defaults to Free, 1:1, 4:3 and 16:9. Setting this to an empty array is ignored.
@property (nonatomic, copy) NSArray<IMGLYCropRatio *> * _Nonnull allowedCropRatios;

/// This closure allows further configuration of the crop ratio buttons. The closure is called for each crop ratio button and has the button and its corresponding crop ratio as parameters.
@property (nonatomic, copy) void (^ _Nullable cropRatioButtonConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull, IMGLYCropRatio * _Nonnull);

/// This closure is called every time the user selects a crop ratio.
@property (nonatomic, copy) void (^ _Nullable cropRatioSelectedClosure)(IMGLYCropRatio * _Nonnull);

/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Used to determine device orientation even if orientation lock is active.
SWIFT_CLASS_NAMED("DeviceOrientationController")
@interface IMGLYDeviceOrientationController : NSObject

/// Starts to observe the accelerometer to update the capture video orientation. This needs to be done, to capture with the correct device orientation.
- (void)start;

/// Stops observing the acceleronmenter.
- (void)stop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class IMGLYGradientView;
@class UIActivityIndicatorView;


/// A FilterCollectionViewCell is a cell that shows an image (usually with a filter applied to it) and a label at the bottom. When selected the cell has an overlay and an selection indicator at the bottom.
SWIFT_CLASS_NAMED("FilterCollectionViewCell")
@interface IMGLYFilterCollectionViewCell : UICollectionViewCell

/// The image view that display the image.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;

/// A gradient from transparent to black that is behind the label for better readability.
@property (nonatomic, readonly, strong) IMGLYGradientView * _Nonnull gradientView;

/// An overlay that is visible when the cell is selected
@property (nonatomic, readonly, strong) UIView * _Nonnull selectionOverlay;

/// A label at the bottom of the cell
@property (nonatomic, readonly, strong) UILabel * _Nonnull captionLabel;

/// A selection indicator at the bottom of the cell.
@property (nonatomic, readonly, strong) UIView * _Nonnull selectionIndicator;

/// An activity indicator that is centered above the image and usually only shown while the image is loading.
@property (nonatomic, readonly, strong) UIActivityIndicatorView * _Nonnull activityIndicator;

/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)prepareForReuse;

/// :nodoc:
@property (nonatomic, getter=isSelected) BOOL selected;

/// :nodoc:
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end



/// A FilterSelectionController contains everything that is needed to display a list of available filters.
SWIFT_CLASS_NAMED("FilterSelectionController")
@interface IMGLYFilterSelectionController : NSObject

/// The collection view that presents all available filters.
@property (nonatomic, readonly, strong) UICollectionView * _Nonnull collectionView;

/// This block is called when a new photo effect is selected.
@property (nonatomic, copy) void (^ _Nullable selectedBlock)(IMGLYPhotoEffect * _Nonnull);

/// This block is used to determine the currently applied photo effect.
@property (nonatomic, copy) IMGLYPhotoEffect * _Nullable (^ _Nullable activePhotoEffectBlock)(void);

/// This block is used to configure the filter collection view cell.
@property (nonatomic, copy) void (^ _Nullable cellConfigurationClosure)(IMGLYFilterCollectionViewCell * _Nonnull, IMGLYPhotoEffect * _Nonnull);

/// :nodoc:
- (nonnull instancetype)init;

/// Returns a newly allocated instance of a FilterSelectionController using the given input image.
///
/// \param inputImage The input image that should be used to preview the filters.
///
/// \returns  An instance of a <code>FilterSelectionController
/// </code>.
- (nonnull instancetype)initWithInputImage:(UIImage * _Nullable)inputImage OBJC_DESIGNATED_INITIALIZER;

/// Updates the cell selection based on the activePhotoEffectBlock.
///
/// \param animated If <code>true
/// </code> the selection will be animated.
- (void)updateSelectionAnimated:(BOOL)animated;
@end


@interface IMGLYFilterSelectionController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>

/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYFilterSelectionController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>

/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;

/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end



/// A FilterToolController is reponsible for displaying the UI to apply an effect filter to an image.
SWIFT_CLASS_NAMED("FilterToolController")
@interface IMGLYFilterToolController : IMGLYPhotoEditToolController

/// :nodoc:
- (void)viewDidLoad;

/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;

/// :nodoc:
- (void)updateViewConstraints;

/// :nodoc:
- (void)photoEditModelDidChange:(NSNotification * _Nonnull)notification;

/// :nodoc:
- (void)didBecomeActiveTool;

/// :nodoc:
- (void)willResignActiveTool;
- (nonnull instancetype)initWithPhotoEditModel:(IMGLYPhotoEditMutableModel * _Nonnull)photoEditModel configuration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/// Options for configuring a FilterToolController.
SWIFT_CLASS_NAMED("FilterToolControllerOptions")
@interface IMGLYFilterToolControllerOptions : IMGLYToolControllerOptions

/// This closure can be used to configure the filter intensity slider.
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(IMGLYSlider * _Nonnull);

/// This closure can be used to configure the filter intensity slider's container view.
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensitySliderContainerConfigurationClosure)(UIView * _Nonnull);

/// Enable/Disable the filter intensity slider. Defaults to true.
@property (nonatomic, readonly) BOOL showFilterIntensitySlider;

/// The intensity that should be initialy applied to a filter when selecting it. Defaults to 75 %.
@property (nonatomic, readonly) CGFloat initialFilterIntensity;

/// This closure is called every time the user selects a filter.
@property (nonatomic, readonly, copy) void (^ _Nullable filterSelectedClosure)(IMGLYPhotoEffect * _Nonnull);

/// This closure will be called whenever the value of the slider changes. The Slider and the selected instance of PhotoEffect will be passed as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable filterIntensityChangedClosure)(IMGLYSlider * _Nonnull, IMGLYPhotoEffect * _Nonnull);

/// This closure allows further configuration of the filter cells. The closure is called for each filter cell and has the cell and its corresponding instance of PhotoEffect as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable filterCellConfigurationClosure)(IMGLYFilterCollectionViewCell * _Nonnull, IMGLYPhotoEffect * _Nonnull);

/// Returns a newly allocated instance of a FilterToolControllerOptions using the default builder.
///
/// \returns  An instance of a <code>FilterToolControllerOptions
/// </code>.
- (nonnull instancetype)init;

/// Returns a newly allocated instance of a FilterToolControllerOptions using the given builder.
///
/// \param builder A <code>FilterToolControllerOptionsBuilder
/// </code> instance.
///
/// \returns  An instance of a <code>FilterToolControllerOptions
/// </code>.
- (nonnull instancetype)initWithBuilder:(IMGLYFilterToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end



/// The default FilterToolControllerOptionsBuilder for FilterToolControllerOptions.
SWIFT_CLASS_NAMED("FilterToolControllerOptionsBuilder")
@interface IMGLYFilterToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder

/// This closure can be used to configure the filter intensity slider.
@property (nonatomic, copy) void (^ _Nullable filterIntensitySliderConfigurationClosure)(IMGLYSlider * _Nonnull);

/// This closure can be used to configure the filter intensity slider's container view.
@property (nonatomic, copy) void (^ _Nullable filterIntensitySliderContainerConfigurationClosure)(UIView * _Nonnull);

/// Enable/Disable the filter intensity slider. Defaults to true.
@property (nonatomic) BOOL showFilterIntensitySlider;

/// The intensity that should be initialy applied to a filter when selecting it. Defaults to 75 %.
@property (nonatomic) CGFloat initialFilterIntensity;

/// This closure is called every time the user selects a filter.
@property (nonatomic, copy) void (^ _Nullable filterSelectedClosure)(IMGLYPhotoEffect * _Nonnull);

/// This closure will be called whenever the value of the slider changes. The Slider and the selected instance of PhotoEffect will be passed as parameters.
@property (nonatomic, copy) void (^ _Nullable filterIntensityChangedClosure)(IMGLYSlider * _Nonnull, IMGLYPhotoEffect * _Nonnull);

/// This closure allows further configuration of the filter cells. The closure is called for each filter cell and has the cell and its corresponding instance of PhotoEffect as parameters.
@property (nonatomic, copy) void (^ _Nullable filterCellConfigurationClosure)(IMGLYFilterCollectionViewCell * _Nonnull, IMGLYPhotoEffect * _Nonnull);

/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A FocusToolController is reponsible for displaying the UI to adjust the focus of an image.
SWIFT_CLASS_NAMED("FocusToolController")
@interface IMGLYFocusToolController : IMGLYPhotoEditToolController

/// :nodoc:
- (void)viewDidLoad;

/// :nodoc:
- (void)updateViewConstraints;

/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;

/// :nodoc:
- (void)photoEditModelDidChange:(NSNotification * _Nonnull)notification;

/// :nodoc:
- (void)didBecomeActiveTool;

/// :nodoc:
- (void)willResignActiveTool;
- (nonnull instancetype)initWithPhotoEditModel:(IMGLYPhotoEditMutableModel * _Nonnull)photoEditModel configuration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYFocusToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>

/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
@end


@interface IMGLYFocusToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>

/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end



/// The GradientViewDelegate protocol defines methods that allow you respond to the events of an instance of CircleGradientView or BoxGradientView.
SWIFT_PROTOCOL_NAMED("GradientViewDelegate")
@protocol IMGLYGradientViewDelegate

/// Called when the user interaction starts in a gradient view.
///
/// \param gradientView The gradient view that started the user interaction.
- (void)gradientViewUserInteractionStarted:(UIView * _Nonnull)gradientView;

/// Called when the user interaction ends in a gradient view.
///
/// \param gradientView The gradient view that ended the user interaction.
- (void)gradientViewUserInteractionEnded:(UIView * _Nonnull)gradientView;

/// Called when the control points changed in a gradient view.
///
/// \param gradientView The gradient view of which the control points changed.
- (void)gradientViewControlPointChanged:(UIView * _Nonnull)gradientView;
@end


@interface IMGLYFocusToolController (SWIFT_EXTENSION(imglyKit)) <IMGLYGradientViewDelegate>

/// :nodoc:
- (void)gradientViewUserInteractionStarted:(UIView * _Nonnull)gradientView;

/// :nodoc:
- (void)gradientViewUserInteractionEnded:(UIView * _Nonnull)gradientView;

/// :nodoc:
- (void)gradientViewControlPointChanged:(UIView * _Nonnull)gradientView;
@end


@interface IMGLYFocusToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>

/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;

/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;

/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end



/// Options for configuring a FocusToolController.
SWIFT_CLASS_NAMED("FocusToolControllerOptions")
@interface IMGLYFocusToolControllerOptions : IMGLYToolControllerOptions

/// This closure allows further configuration of the focus type buttons. The closure is called for each focus type button and has the button and its corresponding focus type as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable focusTypeButtonConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull, IMGLYFocusType);

/// This closure is called when the user selects a focus type.
@property (nonatomic, readonly, copy) void (^ _Nullable focusTypeSelectedClosure)(IMGLYFocusType);

/// This closure can be used to configure the slider.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderConfigurationClosure)(IMGLYSlider * _Nonnull);

/// This closure can be used to configure the view that contains the slider.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);

/// This closure is called whenever the slider changes its value. The instance of Slider and the active focus type are passed as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable sliderChangedValueClosure)(IMGLYSlider * _Nonnull, IMGLYFocusType);

/// This closure can be used to configure the circle gradient view.
@property (nonatomic, readonly, copy) void (^ _Nullable circleGradientViewConfigurationClosure)(IMGLYCircleGradientView * _Nonnull);

/// This closure can be used to configure the box gradient view.
@property (nonatomic, readonly, copy) void (^ _Nullable boxGradientViewConfigurationClosure)(IMGLYBoxGradientView * _Nonnull);

/// Returns a newly allocated instance of a FocusToolControllerOptions using the default builder.
///
/// \returns  An instance of a <code>FocusToolControllerOptions
/// </code>.
- (nonnull instancetype)init;

/// Returns a newly allocated instance of a FocusToolControllerOptions using the given builder.
///
/// \param builder A <code>FocusToolControllerOptionsBuilder
/// </code> instance.
///
/// \returns  An instance of a <code>FocusToolControllerOptions
/// </code>.
- (nonnull instancetype)initWithBuilder:(IMGLYFocusToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end



/// The default FocusToolControllerOptionsBuilder for FocusToolControllerOptions.
SWIFT_CLASS_NAMED("FocusToolControllerOptionsBuilder")
@interface IMGLYFocusToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder

/// This closure allows further configuration of the focus type buttons. The closure is called for each focus type button and has the button and its corresponding focus type as parameters.
@property (nonatomic, copy) void (^ _Nullable focusTypeButtonConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull, IMGLYFocusType);

/// This closure is called when the user selects a focus type.
@property (nonatomic, copy) void (^ _Nullable focusTypeSelectedClosure)(IMGLYFocusType);

/// This closure can be used to configure the slider.
@property (nonatomic, copy) void (^ _Nullable sliderConfigurationClosure)(IMGLYSlider * _Nonnull);

/// This closure can be used to configure the view that contains the slider.
@property (nonatomic, copy) void (^ _Nullable sliderContainerConfigurationClosure)(UIView * _Nonnull);

/// This closure is called whenever the slider changes its value. The instance of Slider and the active focus type are passed as parameters.
@property (nonatomic, copy) void (^ _Nullable sliderChangedValueClosure)(IMGLYSlider * _Nonnull, IMGLYFocusType);

/// This closure can be used to configure the circle gradient view.
@property (nonatomic, copy) void (^ _Nullable circleGradientViewConfigurationClosure)(IMGLYCircleGradientView * _Nonnull);

/// This closure can be used to configure the box gradient view.
@property (nonatomic, copy) void (^ _Nullable boxGradientViewConfigurationClosure)(IMGLYBoxGradientView * _Nonnull);

/// An array of IMGLYFocusType raw values wrapped in NSNumbers. Setting this property overrides any previously set values in allowedFocusTypes with the corresponding IMGLYFocusType values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedFocusTypesAsNSNumbers;

/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Provides functions to import font added as resource. It also registers them, so that the application can load them like any other pre-installed font.
SWIFT_CLASS_NAMED("FontImporter")
@interface IMGLYFontImporter : NSObject

/// Imports all fonts added as resource. Supported formats are TTF and OTF.
- (void)importFonts;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol IMGLYFontSelectorViewDelegate;


/// The FontSelectorView class provides a class that is used to select a font.
SWIFT_CLASS_NAMED("FontSelectorView")
@interface IMGLYFontSelectorView : UIScrollView

/// The receiver’s delegate.\See 
///
/// <code>FontSelectorViewDelegate
/// </code>.
@property (nonatomic, weak) id <IMGLYFontSelectorViewDelegate> _Nullable selectorDelegate;

/// The text color for the selected font.
@property (nonatomic, strong) UIColor * _Nonnull selectedTextColor;

/// The text color for the fonts.
@property (nonatomic, strong) UIColor * _Nonnull textColor;

/// The text color for the font's label.
@property (nonatomic, strong) UIColor * _Nonnull labelColor;

/// The name of the currently selected font.
@property (nonatomic, copy) NSString * _Nonnull selectedFontName;

/// The preview text.
@property (nonatomic, copy) NSString * _Nonnull text;

/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)layoutSubviews;
@end



/// The FontSelectorViewDelegate protocol defines methods that allow you respond to the events of an instance of FontSelectorView.
SWIFT_PROTOCOL_NAMED("FontSelectorViewDelegate")
@protocol IMGLYFontSelectorViewDelegate

/// Called when the font selector selected a font.
///
/// \param fontSelectorView The font selector that selected the font.
///
/// \param fontName The name of the font that was selected.
- (void)fontSelectorView:(IMGLYFontSelectorView * _Nonnull)fontSelectorView didSelectFontWithName:(NSString * _Nonnull)fontName;
@end

@class IMGLYFrameInfoRecord;


/// The Frame class holds all informations needed to be managed and rendered.
SWIFT_CLASS_NAMED("Frame")
@interface IMGLYFrame : NSObject

/// The label of the frame. This is used for accessibility.
@property (nonatomic, readonly, copy) NSString * _Nonnull accessibilityText;

/// Returns a newly allocated instance of Frame using the given accessibility text.
///
/// \param accessibilityText The accessibility text that describes this frame.
///
/// \returns  An instance of a <code>Frame
/// </code>.
- (nonnull instancetype)initWithInfo:(IMGLYFrameInfoRecord * _Nonnull)info OBJC_DESIGNATED_INITIALIZER;

/// Get a frame image matching the aspect ratio.
///
/// \param ratio The desired ratio.
///
/// \param completionBlock A completion block.
- (void)imageForRatio:(float)ratio completionBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completionBlock;

/// Get a frame thumbnail matching the aspect ratio.
///
/// \param ratio The desired ratio.
///
/// \param completionBlock A completion block.
- (void)thumbnailForRatio:(float)ratio completionBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completionBlock;

/// Add an image that is used as a frame for a ratio.
///
/// This method adds an url to an image to the frame which then loads its image and its thumbnail image from
/// an <code>NSURL
/// </code> when needed. That image is then placed in a cache, that is purged when a memory warning is
/// received.
///
/// \param imageURL The url of an image. This can either be in your bundle or remote.
///
/// \param ratio An aspect ratio.
- (void)addImageURL:(NSURL * _Nonnull)imageURL ratio:(float)ratio;

/// Add an thumbnail that is used as a frame for a ratio.
///
/// This method adds an url to an image to the frame which then loads its image and its thumbnail image from
/// an <code>NSURL
/// </code> when needed. That image is then placed in a cache, that is purged when a memory warning is
/// received.
///
/// \param imageURL The url of an image. This can either be in your bundle or remote.
///
/// \param ratio An aspect ratio.
- (void)addThumbnailURL:(NSURL * _Nonnull)imageURL ratio:(float)ratio;

/// Add an image that is used as a frame for a ratio.
///
/// This method adds an <code>UIImage
/// </code> to a frame. This image is <em>not</em> placed in a cache by this SDK. If you choose to use this initializer,
/// then you should create the <code>UIImage
/// </code>s that you pass with <code>init(named:)
/// </code> or <code>init(named:inBundle:compatibleWithTraitCollection:)
/// </code>,
/// so that they are added to the system cache and automatically purged when memory is low.
///
/// \param image The image to use for this frame.
///
/// \param ratio An aspect ratio.
- (void)addImage:(UIImage * _Nonnull)image ratio:(float)ratio;

/// Add an thumbnail that is used as a frame for a ratio.
///
/// This method adds an <code>UIImage
/// </code> to a frame. This image is <em>not</em> placed in a cache by this SDK. If you choose to use this initializer,
/// then you should create the <code>UIImage
/// </code>s that you pass with <code>init(named:)
/// </code> or <code>init(named:inBundle:compatibleWithTraitCollection:)
/// </code>,
/// so that they are added to the system cache and automatically purged when memory is low.
///
/// \param image The image to use for this frame.
///
/// \param ratio An aspect ratio.
- (void)addThumbnail:(UIImage * _Nonnull)image ratio:(float)ratio;

/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object;
@end

@protocol IMGLYFrameControllerDelegate;


/// The FrameController takes care of positioning and updating a frame that is applied to an image.
SWIFT_CLASS_NAMED("FrameController")
@interface IMGLYFrameController : NSObject

/// The receiver's delegate.\See 
///
/// <code>FrameControllerDelegate
/// </code>.
@property (nonatomic, weak) id <IMGLYFrameControllerDelegate> _Nullable delegate;

/// The currently selected frame.
@property (nonatomic, strong) IMGLYFrame * _Nullable frame;

/// The currently active image ratio.
@property (nonatomic) float imageRatio;

/// Whether or not the frame controller is currently locked.
@property (nonatomic, readonly) BOOL locked;

/// The image view that should be used to show the frame in.
@property (nonatomic, strong) UIImageView * _Nullable imageView;

/// The view that contains imageView.
@property (nonatomic, strong) UIView * _Nullable imageViewContainerView;

/// Locks the frame controller so that the frame stays in place even when cropping.
- (void)lock;

/// Unlocks the frame controller so that the frame's position and size is updated when cropping.
- (void)unlock;

/// Updates the position and size of the frame if needed.
- (void)updatePositioning;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The FrameControllerDelegate protocol defines methods that allow you to pass information to an instance of FrameController.
SWIFT_PROTOCOL_NAMED("FrameControllerDelegate")
@protocol IMGLYFrameControllerDelegate

/// The normalized cropping rect that is currently applied to the image.
///
/// \param frameController The frame controller that is asking for the cropping area.
///
/// \returns  A <code>CGRect
/// </code>.
- (CGRect)frameControllerNormalizedCropRect:(IMGLYFrameController * _Nonnull)frameController;

/// The size of the base image that is being edited.
///
/// \param frameController The frame controller that is asking for the size of the base image.
///
/// \returns  The <code>CGSize
/// </code> of the base image.
- (CGSize)frameControllerBaseImageSize:(IMGLYFrameController * _Nonnull)frameController;
@end

@class IMGLYImageInfoRecord;


/// Represents a single frame information retrieved via JSON.
SWIFT_CLASS_NAMED("FrameInfoRecord")
@interface IMGLYFrameInfoRecord : NSObject

/// The name of the image.
@property (nonatomic, copy) NSString * _Nonnull name;

/// The label of the frame. This is used for accessibility.
@property (nonatomic, copy) NSString * _Nonnull accessibilityText;

/// An array of ImageInfoRecord representing the associated  images.
@property (nonatomic, copy) NSArray<IMGLYImageInfoRecord *> * _Nonnull imageInfos;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The JSONStore provides methods to retrieve JSON data from any URL.
SWIFT_PROTOCOL_NAMED("FrameStoreProtocol")
@protocol IMGLYFrameStoreProtocol

/// Retrieves FrameInfoRecord data, from the JSON located at the specified URL.
///
/// \param url A valid URL.
///
/// \param completionBlock A completion block.
- (void)get:(NSURL * _Nonnull)url completionBlock:(void (^ _Nonnull)(NSArray<IMGLYFrameInfoRecord *> * _Nullable, NSError * _Nullable))completionBlock;
@end

@protocol IMGLYJSONFrameParserProtocol;
@protocol IMGLYJSONStoreProtocol;


/// The JSONStore class provides methods to retrieve JSON data from any URL. It also caches the data due to efficiency, and performs a sanity check.
SWIFT_CLASS_NAMED("FrameStore")
@interface IMGLYFrameStore : NSObject <IMGLYFrameStoreProtocol>

/// A shared instance for convenience.
+ (IMGLYFrameStore * _Nonnull)sharedStore;

/// The json parser to use.
@property (nonatomic, strong) id <IMGLYJSONFrameParserProtocol> _Nonnull jsonParser;

/// This store is used to retrieve the JSON data.
@property (nonatomic, strong) id <IMGLYJSONStoreProtocol> _Nonnull jsonStore;

/// Retrieves FrameInfoRecord data, from the JSON located at the specified URL.
///
/// \param url A valid URL.
///
/// \param completionBlock A completion block.
- (void)get:(NSURL * _Nonnull)url completionBlock:(void (^ _Nonnull)(NSArray<IMGLYFrameInfoRecord *> * _Nullable, NSError * _Nullable))completionBlock;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// A FrameToolController is reponsible for displaying the UI to add or remove a frame to an image.
SWIFT_CLASS_NAMED("FrameToolController")
@interface IMGLYFrameToolController : IMGLYPhotoEditToolController

/// :nodoc:
- (void)viewDidLoad;

/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;

/// :nodoc:
- (void)didBecomeActiveTool;

/// :nodoc:
- (void)willResignActiveTool;
- (nonnull instancetype)initWithPhotoEditModel:(IMGLYPhotoEditMutableModel * _Nonnull)photoEditModel configuration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYFrameToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>

/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
@end


@interface IMGLYFrameToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>

/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;

/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYFrameToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>

/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;

/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;

/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@protocol IMGLYFramesDataSourceProtocol;


/// Options for configuring a FramesEditorViewController.
SWIFT_CLASS_NAMED("FrameToolControllerOptions")
@interface IMGLYFrameToolControllerOptions : IMGLYToolControllerOptions

/// An object conforming to the FramesDataSourceProtocol Per default an instance of FramesDataSource offering all filters is set.
@property (nonatomic, readonly, strong) id <IMGLYFramesDataSourceProtocol> _Nonnull framesDataSource;

/// This closure is called when the user selects a frame. The closure is passed nil when no frame was selected.
@property (nonatomic, readonly, copy) void (^ _Nullable selectedFrameClosure)(IMGLYFrame * _Nullable);

/// The tolerance that is used to pick the correct frame image based on the aspect ratio. Defaults to 0.1.
@property (nonatomic, readonly) float tolerance;

/// Returns a newly allocated instance of a FrameToolControllerOptions using the default builder.
///
/// \returns  An instance of a <code>MainToolControllerOptions
/// </code>.
- (nonnull instancetype)init;

/// Returns a newly allocated instance of a FrameToolControllerOptions using the given builder.
///
/// \param builder A <code>FrameToolControllerOptionsBuilder
/// </code> instance.
///
/// \returns  An instance of a <code>FrameToolControllerOptions
/// </code>.
- (nonnull instancetype)initWithBuilder:(IMGLYFrameToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end



/// The default FrameToolControllerOptionsBuilder for FrameToolControllerOptions.
SWIFT_CLASS_NAMED("FrameToolControllerOptionsBuilder")
@interface IMGLYFrameToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder

/// An object conforming to the FramesDataSourceProtocol Per default an instance of FramesDataSource offering all filters is set.
@property (nonatomic, strong) id <IMGLYFramesDataSourceProtocol> _Nonnull framesDataSource;

/// This closure is called when the user selects a frame. The closure is passed nil when no frame was selected.
@property (nonatomic, copy) void (^ _Nullable selectedFrameClosure)(IMGLYFrame * _Nullable);

/// The tolerance that is used to pick the correct frame image based on the aspect ratio. Defaults to 0.1.
@property (nonatomic) float tolerance;

/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// An object that adopts the FramesDataSourceProtocol protocol is responsible for providing the data that is required to display and add frames to an image.
SWIFT_PROTOCOL_NAMED("FramesDataSourceProtocol")
@protocol IMGLYFramesDataSourceProtocol

/// Returns the count of the frames. We added a ratio parameter in case you only to show frames that have a mathing ratio.
///
/// \param ratio The ratio of the image.
///
/// \param completionBlock Used to return the result asynchronously.
- (void)frameCount:(float)ratio completionBlock:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completionBlock;

/// Returns the thumbnail and label of the frame at a given index for the ratio.
///
/// \param index The index of the frame.
///
/// \param ratio The ratio of the image.
///
/// \param completionBlock Used to return the result asynchronously.
- (void)thumbnailAndLabelAtIndex:(NSInteger)index ratio:(float)ratio completionBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSString * _Nullable, NSError * _Nullable))completionBlock;

/// Returns the frame at a given index for the given ratio.
///
/// \param index The index of the frame.
///
/// \param ratio The ratio of the image.
///
/// \param completionBlock Used to return the result asynchronously.
- (void)frameAtIndex:(NSInteger)index ratio:(float)ratio completionBlock:(void (^ _Nonnull)(IMGLYFrame * _Nullable, NSError * _Nullable))completionBlock;
@end



/// An implementation of FramesDataSourceProtocol with all available frames.
SWIFT_CLASS_NAMED("FramesDataSource")
@interface IMGLYFramesDataSource : NSObject <IMGLYFramesDataSourceProtocol>

/// Returns a newly allocated instance of FramesDataSource for the given frames.
///
/// \param frames An array of frames that this data source offers.
///
/// \returns  An instance of a <code>FramesDataSource
/// </code>.
- (nonnull instancetype)initWithFrames:(NSArray<IMGLYFrame *> * _Nonnull)frames OBJC_DESIGNATED_INITIALIZER;

/// Gets the count of the frames. We added a ratio parameter in case you only to show frames that have a mathing ratio.
///
/// \param ratio The ratio.
///
/// \param completionBlock A completion block that receives the results.
- (void)frameCount:(float)ratio completionBlock:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completionBlock;

/// Gets the matching sticker at index.
///
/// \param index The index of the frame.
///
/// \param ratio The allowed ratio.
///
/// \param tolerance The tolerance applied to the ratio.
///
/// \param completionBlock A completion block that receives the results.
- (void)frameAtIndex:(NSInteger)index ratio:(float)ratio completionBlock:(void (^ _Nonnull)(IMGLYFrame * _Nullable, NSError * _Nullable))completionBlock;

/// Returns the thumbnail and label of the frame at a given index for the ratio.
///
/// \param index The index of the frame.
///
/// \param ratio The ratio of the image.
///
/// \param completionBlock Used to return the result asynchronously.
- (void)thumbnailAndLabelAtIndex:(NSInteger)index ratio:(float)ratio completionBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSString * _Nullable, NSError * _Nullable))completionBlock;
@end




/// A GradientView shows a gradient from its top to its bottom.
SWIFT_CLASS_NAMED("GradientView")
@interface IMGLYGradientView : UIView

/// The top color of the gradient.
@property (nonatomic, readonly, strong) UIColor * _Nonnull topColor;

/// The bottom color of the gradient.
@property (nonatomic, readonly, strong) UIColor * _Nonnull bottomColor;

/// Returns a newly allocated instance of a GradientView.
///
/// \param topColor The color at the top of the view.
///
/// \param bottomColor The color at the bottom of the view.
///
/// \returns  An instance of a <code>GradientView
/// </code>.
- (nonnull instancetype)initWithTopColor:(UIColor * _Nonnull)topColor bottomColor:(UIColor * _Nonnull)bottomColor OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)drawRect:(CGRect)rect;
@end




/// A class that wraps values for hue, saturation and brightness.
SWIFT_CLASS_NAMED("HSB")
@interface IMGLYHSB : NSObject

/// The hue value.
@property (nonatomic, readonly) CGFloat hue;

/// The saturation value.
@property (nonatomic, readonly) CGFloat saturation;

/// The brightness value.
@property (nonatomic, readonly) CGFloat brightness;

/// :nodoc:
- (nonnull instancetype)initWithHue:(CGFloat)hue saturation:(CGFloat)saturation brightness:(CGFloat)brightness OBJC_DESIGNATED_INITIALIZER;
@end



/// The HuePickerView class provides a view to visualy pick a hue.
SWIFT_CLASS_NAMED("HuePickerView")
@interface IMGLYHuePickerView : UIView

/// The receiver’s delegate.\See 
///
/// <code>HuePickerViewDelegate
/// </code>.
@property (nonatomic, weak) id <IMGLYHuePickerViewDelegate> _Nullable pickerDelegate;

/// The currently selected hue.
@property (nonatomic) CGFloat hue;

/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// The selected color.
@property (nonatomic, strong) UIColor * _Nonnull color;

/// :nodoc:
- (void)drawRect:(CGRect)rect;

/// :nodoc:
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// :nodoc:
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// :nodoc:
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// :nodoc:
- (void)layoutSubviews;
@end




/// An IconCaptionCollectionViewCell is a cell that shows an icon, a label and a selectionIndicator when the cell is selected.
SWIFT_CLASS_NAMED("IconCaptionCollectionViewCell")
@interface IMGLYIconCaptionCollectionViewCell : UICollectionViewCell

/// An image view at the top of the cell.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;

/// A label at the bottom of the cell.
@property (nonatomic, readonly, strong) UILabel * _Nonnull captionLabel;

/// A selection indicator at the bottom of the cell.
@property (nonatomic, readonly, strong) UIView * _Nonnull selectionIndicator;

/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)prepareForReuse;

/// :nodoc:
@property (nonatomic, getter=isSelected) BOOL selected;

/// :nodoc:
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end



/// A IconCollectionViewCell is a cell that has an image view (usually with an icon) and a selectionIndicator at the bottom of the cell that is only visible when the cell is selected.
SWIFT_CLASS_NAMED("IconCollectionViewCell")
@interface IMGLYIconCollectionViewCell : UICollectionViewCell

/// An image view that usually shows an icon.
@property (nonatomic, readonly, strong) UIImageView * _Nonnull imageView;

/// A selection indicator at the bottom of the cell.
@property (nonatomic, readonly, strong) UIView * _Nonnull selectionIndicator;

/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)prepareForReuse;

/// :nodoc:
@property (nonatomic, getter=isSelected) BOOL selected;

/// :nodoc:
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end



/// Handles the geometry of an image and provides helpers to easily rotate or flip an image.
SWIFT_CLASS_NAMED("ImageGeometry")
@interface IMGLYImageGeometry : NSObject <NSCopying>

/// The rectangle of the input image.
@property (nonatomic, readonly) CGRect inputRect;

/// The currently applied orientation.
@property (nonatomic) IMGLYOrientation appliedOrientation;

/// :nodoc:
- (nonnull instancetype)init;

/// Returns a newly allocated instance of an ImageGeometry using the given input size.
///
/// \param inputSize The input size of the image.
///
/// \returns  An instance of an <code>ImageGeometry
/// </code>.
- (nonnull instancetype)initWithInputSize:(CGSize)inputSize OBJC_DESIGNATED_INITIALIZER;

/// Returns a newly allocated instance of an ImageGeometry using the given input size and the given initial orientation.
///
/// \param inputSize The input size of the image.
///
/// \param initialOrientation The initial orientation to use.
///
/// \returns  An instance of an <code>ImageGeometry
/// </code>.
- (nonnull instancetype)initWithInputSize:(CGSize)inputSize initialOrientation:(IMGLYOrientation)initialOrientation;

/// Creates a CGAffineTransform from a given IMGLYOrientation.
///
/// \param orientation The <code>IMGLYOrientation
/// </code> to get the transform for.
///
/// \returns  A <code>CGAffineTransform
/// </code>, that when applied to a view rotates it to the same orientation as the passed orientation.
- (CGAffineTransform)transformFromOrientation:(IMGLYOrientation)orientation;

/// Apply a vertical flip to the image's geometry.
- (void)flipVertically;

/// Apply a horizontal flip to the image's geometry.
- (void)flipHorizontally;

/// Rotate the image's geometry clockwise by 90 degrees.
- (void)rotateClockwise;

/// Rotate the image's geometry counter clockwise by 90 degrees.
- (void)rotateCounterClockwise;

/// Directly applies a given orientation to the image's geometry.
///
/// \param orientation The orientation to apply.
- (void)applyOrientation:(IMGLYOrientation)orientation;

/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Null_unspecified)zone;
@end



/// Represents a single image entry nested within a frame-JSON file.
SWIFT_CLASS_NAMED("ImageInfoRecord")
@interface IMGLYImageInfoRecord : NSObject

/// The image ratio that image has, is out for.
@property (nonatomic) float ratio;

/// An url atlas. This maps tags like 'thumbnail' onto an url
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull urlAtlas;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The JSONStore provides methods to retrieve JSON data from any URL.
SWIFT_PROTOCOL_NAMED("ImageStoreProtocol")
@protocol IMGLYImageStoreProtocol

/// Retrieves JSON data from the specified URL.
///
/// \param url A valid URL.
///
/// \param completionBlock A completion block.
- (void)get:(NSURL * _Nonnull)url completionBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completionBlock;
@end

@protocol IMGLYRequestServiceProtocol;


/// The JSONStore class provides methods to retrieve JSON data from any URL. It also caches the data due to efficiency.
SWIFT_CLASS_NAMED("ImageStore")
@interface IMGLYImageStore : NSObject <IMGLYImageStoreProtocol>

/// A shared instance for convenience.
+ (IMGLYImageStore * _Nonnull)sharedStore;

/// A service that is used to perform http get requests.
@property (nonatomic, strong) id <IMGLYRequestServiceProtocol> _Nonnull requestService;

/// Whether or not to display an activity indicator while fetching the images. Default is true.
@property (nonatomic) BOOL showSpinner;

/// Retrieves JSON data from the specified URL.
///
/// \param url A valid URL.
///
/// \param completionBlock A completion block.
- (void)get:(NSURL * _Nonnull)url completionBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completionBlock;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// A helper class that is used to create instances of classes. It is used within the SDK to create filters, views, view controllers and so on.
SWIFT_CLASS_NAMED("InstanceFactory")
@interface IMGLYInstanceFactory : NSObject

/// Returns a list that determins what fonts will be available within the text-dialog.
///
/// \returns  An array of fontnames.
+ (NSArray<NSString *> * _Nonnull)availableFontsList;

/// Some font names are long and ugly therefor. In that case its possible to add an entry into this dictionary. The SDK will perform a lookup first and will use that name in the UI.
///
/// \returns  A map to beautfy the names.
+ (NSDictionary<NSString *, NSString *> * _Nonnull)fontDisplayNames;

/// Returns a newly allocated font importer.
///
/// \returns  An instance of <code>FontImporter
/// </code>.
+ (IMGLYFontImporter * _Nonnull)fontImporter;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum PhotoEditorAction : NSInteger;

@interface IMGLYInstanceFactory (SWIFT_EXTENSION(imglyKit))

/// Return the tool controller according to the button-type. This is used by the main menu.
///
/// \param actionType The type of the button pressed.
///
/// \param withPhotoEditModel The photo edit model that should be passed to the tool controller.
///
/// \param configuration The configuration object that should be applied to the tool controller.
///
/// \returns  A tool controller according to the button-type or <code>nil
/// </code> if no tool controller for the button-type exists.
+ (IMGLYPhotoEditToolController * _Nullable)toolControllerForEditorActionType:(enum PhotoEditorAction)actionType withPhotoEditModel:(IMGLYPhotoEditMutableModel * _Nonnull)photoEditModel configuration:(IMGLYConfiguration * _Nonnull)configuration;

/// Creates a circle gradient view.
///
/// \returns  An instance of <code>CircleGradientView
/// </code>.
+ (IMGLYCircleGradientView * _Nonnull)circleGradientView;

/// Creates a box gradient view.
///
/// \returns  An instance of <code>BoxGradientView
/// </code>.
+ (IMGLYBoxGradientView * _Nonnull)boxGradientView;

/// Creates a crop rect component.
///
/// \returns  An instance of <code>CropRectComponent
/// </code>.
+ (IMGLYCropRectComponent * _Nonnull)cropRectComponent;
@end

@class NSDictionary;


/// The JSONParser class is out to parse a JSON dicionary into an array of FrameInfoRecord entries.
SWIFT_PROTOCOL_NAMED("JSONFrameParserProtocol")
@protocol IMGLYJSONFrameParserProtocol

/// Parses the retrieved JSON data to an array of FrameInfoRecords.
///
/// \param dict The JSON induced dictionary.
///
/// \param error An <code>JSONParserError
/// </code>.
///
/// \returns  An array of <code>FrameInfoRecord
/// </code>s.
- (NSArray<IMGLYFrameInfoRecord *> * _Nullable)parseJSON:(NSDictionary * _Nonnull)dict error:(NSError * _Nullable * _Null_unspecified)error;
@end



/// The JSONParser class is out to parse a JSON dicionary into an array of FrameInfoRecord entries.
SWIFT_CLASS_NAMED("JSONFrameParser")
@interface IMGLYJSONFrameParser : NSObject <IMGLYJSONFrameParserProtocol>

/// Parses the retrieved JSON data to an array of FrameInfoRecords.
///
/// \param dict The JSON induced dictionary.
///
/// \param error An <code>JSONParserError
/// </code>.
///
/// \returns  An array of <code>FrameInfoRecord
/// </code>s.
- (NSArray<IMGLYFrameInfoRecord *> * _Nullable)parseJSON:(NSDictionary * _Nonnull)dict error:(NSError * _Nullable * _Null_unspecified)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class IMGLYStickerInfoRecord;


/// The JSONParser class is out to parse a JSON dicionary into an array of StickerInfoRecord entries.
SWIFT_PROTOCOL_NAMED("JSONStickerParserProtocol")
@protocol IMGLYJSONStickerParserProtocol

/// Parses the retrieved JSON data to an array of StickerInfoRecords.
///
/// \param dict The JSON induced dictionary.
///
/// \param error An <code>JSONParserError
/// </code>.
///
/// \returns  An array of <code>StickerInfoRecord
/// </code>s.
- (NSArray<IMGLYStickerInfoRecord *> * _Nullable)parseJSON:(NSDictionary * _Nonnull)dict error:(NSError * _Nullable * _Null_unspecified)error;
@end



/// The JSONParser class is out to parse a JSON dicionary into an array of StickerInfoRecord entries.
SWIFT_CLASS_NAMED("JSONStickerParser")
@interface IMGLYJSONStickerParser : NSObject <IMGLYJSONStickerParserProtocol>

/// Parses the retrieved JSON data to an array of StickerInfoRecords.
///
/// \param dict The JSON induced dictionary.
///
/// \param error An <code>JSONParserError
/// </code>.
///
/// \returns  An array of <code>StickerInfoRecord
/// </code>'s.
- (NSArray<IMGLYStickerInfoRecord *> * _Nullable)parseJSON:(NSDictionary * _Nonnull)dict error:(NSError * _Nullable * _Null_unspecified)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// The JSONStore provides methods to retrieve JSON data from any URL.
SWIFT_PROTOCOL_NAMED("JSONStoreProtocol")
@protocol IMGLYJSONStoreProtocol

/// Retrieves JSON data from the specified URL.
///
/// \param url A valid URL.
///
/// \param completionBlock A completion block.
- (void)get:(NSURL * _Nonnull)url completionBlock:(void (^ _Nonnull)(NSDictionary * _Nullable, NSError * _Nullable))completionBlock;
@end



/// The JSONStore class provides methods to retrieve JSON data from any URL. It also caches the data due to efficiency.
SWIFT_CLASS_NAMED("JSONStore")
@interface IMGLYJSONStore : NSObject <IMGLYJSONStoreProtocol>

/// A shared instance for convenience.
+ (IMGLYJSONStore * _Nonnull)sharedStore;

/// A service that is used to perform http get requests.
@property (nonatomic, strong) id <IMGLYRequestServiceProtocol> _Nonnull requestService;

/// Retrieves JSON data from the specified URL.
///
/// \param url A valid URL.
///
/// \param completionBlock A completion block.
- (void)get:(NSURL * _Nonnull)url completionBlock:(void (^ _Nonnull)(NSDictionary * _Nullable, NSError * _Nullable))completionBlock;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// A LabelCaptionCollectionViewCell is a cell that displays two labels, one at the top and one at the bottom. It also has a selectionIndicator to show whether or not the cell is currently selected.
SWIFT_CLASS_NAMED("LabelCaptionCollectionViewCell")
@interface IMGLYLabelCaptionCollectionViewCell : UICollectionViewCell

/// A label near the top of the cell.
@property (nonatomic, readonly, strong) UILabel * _Nonnull label;

/// A label near the bottom of the cell.
@property (nonatomic, readonly, strong) UILabel * _Nonnull captionLabel;

/// A selection indicator at the bottom of the cell.
@property (nonatomic, readonly, strong) UIView * _Nonnull selectionIndicator;

/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)prepareForReuse;

/// :nodoc:
@property (nonatomic, getter=isSelected) BOOL selected;

/// :nodoc:
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@end

@class NSValue;


/// Applies a linear focus to an instance of CIImage.
SWIFT_CLASS_NAMED("LinearFocusFilter")
@interface IMGLYLinearFocusFilter : CIFilter

/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;

/// The first normalized control point of the focus. This control point should use the coordinate system of Core Image, which means that (0,0) is at the top left.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint1;

/// The second normalized control point of the focus. This control point should use the coordinate system of Core Image, which means that (0,0) is at the top left.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint2;

/// The blur radius to use for focus. Default is 4.
@property (nonatomic, strong) NSNumber * _Nullable inputRadius;

/// :nodoc:
- (void)setDefaults;

/// :nodoc:
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSBundle (SWIFT_EXTENSION(imglyKit))

/// The bundle that contains all assets of the PhotoEditor SDK.
+ (NSBundle * _Nonnull)imglyKitBundle;
@end


@interface NSCache (SWIFT_EXTENSION(imglyKit))
@end


@interface NSError (SWIFT_EXTENSION(imglyKit))
@end


@interface NSTimer (SWIFT_EXTENSION(imglyKit))
@end


@interface NSUndoManager (SWIFT_EXTENSION(imglyKit))
@end


/// The actions that can be used in an instance of OrientationToolController.
///
/// <ul><li>RotateLeft:       Rotate the image to the left.</li><li>RotateRight:      Rotate the image to the right.</li><li>FlipHorizontally: Flip the image horizontally.</li><li>FlipVertically:   Flip the image vertically.</li><li>Separator:        Represents a visual separator between the actions.</li></ul>
typedef SWIFT_ENUM(NSInteger, OrientationAction) {

/// Rotate the image to the left.
  OrientationActionRotateLeft = 0,

/// Rotate the image to the right.
  OrientationActionRotateRight = 1,

/// Flip the image horizontally.
  OrientationActionFlipHorizontally = 2,

/// Flip the image vertically.
  OrientationActionFlipVertically = 3,

/// Represents a visual separator between the actions.
  OrientationActionSeparator = 4,
};



/// An OrientationToolController is reponsible for displaying the UI to change the orientation of an image.
SWIFT_CLASS_NAMED("OrientationToolController")
@interface IMGLYOrientationToolController : IMGLYPhotoEditToolController

/// :nodoc:
- (void)viewDidLoad;

/// :nodoc:
- (void)didBecomeActiveTool;

/// :nodoc
- (void)didResignActiveTool;

/// :nodoc:
- (void)willResignActiveTool;

/// :nodoc:
@property (nonatomic, readonly) BOOL wantsDefaultPreviewView;
- (nonnull instancetype)initWithPhotoEditModel:(IMGLYPhotoEditMutableModel * _Nonnull)photoEditModel configuration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYOrientationToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>

/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYOrientationToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>

/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;

/// :nodoc:
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYOrientationToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>

/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;

/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;

/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end



/// Options for configuring a OrientationEditorViewController.
SWIFT_CLASS_NAMED("OrientationToolControllerOptions")
@interface IMGLYOrientationToolControllerOptions : IMGLYToolControllerOptions

/// This closure allows further configuration of the action buttons. The closure is called for each action button and has the button and its corresponding action as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable orientationActionButtonConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull, enum OrientationAction);

/// This closure is called every time the user selects an action
@property (nonatomic, readonly, copy) void (^ _Nullable orientationActionSelectedClosure)(enum OrientationAction);

/// Returns a newly allocated instance of a OrientationToolControllerOptions using the default builder.
///
/// \returns  An instance of a <code>OrientationToolControllerOptions
/// </code>.
- (nonnull instancetype)init;

/// Returns a newly allocated instance of a OrientationToolControllerOptions using the given builder.
///
/// \param builder A <code>OrientationToolControllerOptionsBuilder
/// </code> instance.
///
/// \returns  An instance of a <code>OrientationToolControllerOptions
/// </code>.
- (nonnull instancetype)initWithBuilder:(IMGLYOrientationToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end



/// The default OrientationToolControllerOptionsBuilder for OrientationToolControllerOptions.
SWIFT_CLASS_NAMED("OrientationToolControllerOptionsBuilder")
@interface IMGLYOrientationToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder

/// This closure allows further configuration of the action buttons. The closure is called for each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable orientationActionButtonConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull, enum OrientationAction);

/// An array of OrientationAction raw values wrapped in NSNumbers. Setting this property overrides any previously set values in allowedOrientationActions with the corresponding OrientationAction values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedOrientationActionsAsNSNumbers;

/// This closure is called every time the user selects an action
@property (nonatomic, copy) void (^ _Nullable orientationActionSelectedClosure)(enum OrientationAction);

/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The PathHelper class bundles helper methods to work with paths.
SWIFT_CLASS_NAMED("PathHelper")
@interface IMGLYPathHelper : NSObject

/// Can be used to add a rounded rectangle path to a context.
///
/// \param context The context to add the path to.
///
/// \param width The width of the rectangle.
///
/// \param height The height of the rectangle.
///
/// \param ovalWidth The horizontal corner radius.
///
/// \param ovalHeight The vertical corner radius.
+ (void)clipCornersToOvalWidth:(CGContextRef _Nonnull)context width:(CGFloat)width height:(CGFloat)height ovalWidth:(CGFloat)ovalWidth ovalHeight:(CGFloat)ovalHeight;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class IMGLYPhotoEditModel;
@class NSData;
@class EAGLContext;


/// A PhotoEditRenderer takes a CIImage and an IMGLYPhotoEditModel as input and takes care of applying all necessary effects and filters to the image. The output image can then be rendered into an EAGLContext or converted into a CGImage instance.
SWIFT_CLASS_NAMED("PhotoEditRenderer")
@interface IMGLYPhotoEditRenderer : NSObject

/// The input image.
@property (nonatomic, strong) CIImage * _Nullable originalImage;

/// The photo edit model that describes all effects that should be applied to the input image.
@property (nonatomic, strong) IMGLYPhotoEditModel * _Nullable photoEditModel;

/// The render mode describes which effects should be applied to the input image.
@property (nonatomic) IMGLYRenderMode renderMode;

/// A CIImage instance with all effects and filters applied to it.
@property (nonatomic, readonly, strong) CIImage * _Nonnull outputImage;

/// The size of the output image.
@property (nonatomic, readonly) CGSize outputImageSize;

/// Applies all necessary filters and effects to the input image and converts it to an instance of CGImage.
///
/// \returns  A newly created instance of <code>CGImage
/// </code>.
- (CGImageRef _Nonnull)newOutputImage;

/// Same as newOutputImage() but asynchronously.
///
/// \param completion A completion handler that receives the newly created instance of <code>CGImage
/// </code> once rendering is complete.
- (void)createOutputImageWithCompletion:(void (^ _Nonnull)(CGImageRef _Nonnull outputImage))completion;

/// Applies all necessary filters and effects to the input image and converts it to an instance of NSData with the given compression quality.
///
/// \param compressionQuality The compression quality to apply.
///
/// \param metadataSourceImageURL An url to the original image of which the metadata should be copied to the new image.
///
/// \param completionHandler A completion handler that receives the newly created instance of <code>NSData
/// </code> once rendering is complete.
- (void)generateOutputImageDataWithCompressionQuality:(CGFloat)compressionQuality metadataSourceImageURL:(NSURL * _Nullable)metadataSourceImageURL completionHandler:(void (^ _Nonnull)(NSData * _Nullable outputImageData, CGFloat imageWidth, CGFloat imageHeight))completionHandler;

/// Draws the output image into the given EAGLContext.
///
/// \param context An instance of <code>EAGLContext
/// </code> to draw into.
///
/// \param rect The <code>CGRect
/// </code> in which the output image should be drawn.
///
/// \param viewportWidth The width of the view that displays the framebuffer's content.
///
/// \param viewportHeight The height of the view that displays the framebuffer's content.
- (void)drawOutputImageInContext:(EAGLContext * _Nonnull)context inRect:(CGRect)rect viewportWidth:(NSInteger)viewportWidth viewportHeight:(NSInteger)viewportHeight;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// The PhotoEditToolControllerDelegate protocol defines methods that allow you respond to the events of an instance of PhotoEditToolController.
SWIFT_PROTOCOL_NAMED("PhotoEditToolControllerDelegate")
@protocol IMGLYPhotoEditToolControllerDelegate

/// The photo edit renderer that is being used.
///
/// \param photoEditToolController The photo edit tool controller that is asking for the renderer.
///
/// \returns  An instance of <code>PhotoEditRenderer
/// </code>.
- (IMGLYPhotoEditRenderer * _Nullable)photoEditToolControllerMainRenderer:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// The base image that is being edited.
///
/// \param photoEditToolController The photo edit tool controller that is asking for the base image.
///
/// \returns  An instance of <code>UIImage
/// </code>.
- (UIImage * _Nullable)photoEditToolControllerBaseImage:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// The preview view that shows the edited image.
///
/// \param photoEditToolController The photo edit tool controller that is asking for the preview view.
///
/// \returns  An instance of <code>UIView
/// </code>.
- (UIView * _Nullable)photoEditToolControllerPreviewView:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// The scrolling container that hosts the preview view.
///
/// \param photoEditToolController The photo edit tool controller that is asking for the scrolling container.
///
/// \returns  An instance of <code>UIScrollView
/// </code>.
- (UIScrollView * _Nullable)photoEditToolControllerPreviewViewScrollingContainer:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// The currently selected overlay view.
///
/// \param photoEditToolController The photo edit tool controller that is asking for the overlay view.
///
/// \returns  An instance of <code>StickerImageView
/// </code> or <code>TextLabel
/// </code>.
- (UIView * _Nullable)photoEditToolControllerSelectedOverlayView:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// The container view that hosts the overlay views.
///
/// \param photoEditToolController The photo edit tool controller that is asking for the container.
///
/// \returns  An instance of <code>UIView
/// </code>.
- (UIView * _Nullable)photoEditToolControllerOverlayContainerView:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// The list of currently added overlay views.
///
/// \param photoEditToolController The photo edit tool controller that is asking for the overlay views.
///
/// \returns  An array of <code>UIView
/// </code>s.
- (NSArray<UIView *> * _Nullable)photoEditToolControllerOverlayViews:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// The frame controller that is used to place a frame over the output image.
///
/// \param photoEditToolController The photo edit tool controller that is asking for the frame controller.
///
/// \returns  An instance of <code>FrameController
/// </code>.
- (IMGLYFrameController * _Nullable)photoEditToolControllerFrameController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// Called when the tool finishes editing.
///
/// \param photoEditToolController The photo edit view controller that finished editing.
- (void)photoEditToolControllerDidFinish:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// Called when the tool discards its changes.
///
/// \param photoEditToolController The photo edit tool controller that discarded its changes.
///
/// \param photoEditModel The photo edit model that should be restored.
- (void)photoEditToolController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController didDiscardChangesInFavorOfPhotoEditModel:(IMGLYPhotoEditModel * _Nonnull)photoEditModel;

/// Called when the tool changes its preferred rendering mode.
///
/// \param photoEditToolController The photo edit tool controller that changed its preferred rendering mode.
- (void)photoEditToolControllerDidChangePreferredRenderMode:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// Called when the tool changes whether or not it wants a default preview.
///
/// \param photoEditToolController The photo edit tool controller that changed whether or not the default preview should be visible.
- (void)photoEditToolControllerDidChangeWantsDefaultPreviewView:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// Called when the tool adds an overlay.
///
/// \param photoEditToolController The photo edit tool controller that added an overlay.
///
/// \param view The overlay that was added.
- (void)photoEditToolController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController didAddOverlayView:(UIView * _Nonnull)view;

/// Called when the tool changes the image's orientation.
///
/// \param photoEditToolController The photo edit tool controller that changed the orientation.
///
/// \param orientation The orientation that was changed to.
///
/// \param fromOrientation The orientation that was changed from.
- (void)photoEditToolController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController didChangeToOrientation:(IMGLYOrientation)orientation fromOrientation:(IMGLYOrientation)fromOrientation;

/// Called when the tool wants to present another tool on top of it.
///
/// \param photoEditToolController The photo edit tool controller that wants to present another tool.
///
/// \param toolController The tool that should be presented.
- (void)photoEditToolController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController didSelectToolController:(IMGLYPhotoEditToolController * _Nonnull)toolController;
@end



/// A PhotoEditViewController is responsible for presenting and rendering an edited image.
SWIFT_CLASS_NAMED("PhotoEditViewController")
@interface IMGLYPhotoEditViewController : UIViewController

/// The tool stack item for this controller.\See 
///
/// <code>ToolStackItem
/// </code>.
@property (nonatomic, readonly, strong) IMGLYToolStackItem * _Nonnull toolStackItem;

/// The identifier of the photo effect to apply to the photo immediately. This is useful if you pass a photo that already has an effect applied by the CameraViewController. Note that you must set this property before presenting the view controller.
@property (nonatomic, copy) NSString * _Nullable initialPhotoEffectIdentifier;

/// Returns a newly initialized photo edit view controller for the given photo with a default configuration.
///
/// \param photo The photo to edit.
///
/// \returns  A newly initialized <code>PhotoEditViewController
/// </code> object.
- (nonnull instancetype)initWithPhoto:(UIImage * _Nonnull)photo;

/// Returns a newly initialized photo edit view controller for the given photo with the given configuration options.
///
/// \param photo The photo to edit.
///
/// \param configuration The configuration options to apply.
///
/// \returns  A newly initialized and configured <code>PhotoEditViewController
/// </code> object.
- (nonnull instancetype)initWithPhoto:(UIImage * _Nonnull)photo configuration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)viewDidLoad;

/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;

/// :nodoc:
- (void)viewDidLayoutSubviews;

/// :nodoc:
- (UIStatusBarStyle)preferredStatusBarStyle;

/// :nodoc:
- (BOOL)prefersStatusBarHidden;

/// :nodoc:
- (void)updateViewConstraints;

/// Applies all changes to the photo and passes the edited image to the delegate.
///
/// \param sender The object that initiated the request.
- (void)save:(id _Nullable)sender;

/// Discards all changes to the photo and call the delegate.
///
/// \param sender The object that initiated the request.
- (void)cancel:(id _Nullable)sender;
@end


@interface IMGLYPhotoEditViewController (SWIFT_EXTENSION(imglyKit)) <GLKViewDelegate>

/// :nodoc:
- (void)glkView:(GLKView * _Nonnull)view drawInRect:(CGRect)rect;
@end


@interface IMGLYPhotoEditViewController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>

/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;

/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYPhotoEditViewController (SWIFT_EXTENSION(imglyKit)) <UIGestureRecognizerDelegate>

/// :nodoc:
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer;

/// :nodoc:
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer;
@end


@interface IMGLYPhotoEditViewController (SWIFT_EXTENSION(imglyKit)) <IMGLYFrameControllerDelegate>

/// :nodoc:
- (CGSize)frameControllerBaseImageSize:(IMGLYFrameController * _Nonnull)frameController;

/// :nodoc:
- (CGRect)frameControllerNormalizedCropRect:(IMGLYFrameController * _Nonnull)frameController;
@end


@interface IMGLYPhotoEditViewController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate, UICollectionViewDelegateFlowLayout>

/// :nodoc:
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;

/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;

/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;

/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYPhotoEditViewController (SWIFT_EXTENSION(imglyKit)) <UIScrollViewDelegate>

/// :nodoc:
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;

/// :nodoc:
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;

/// :nodoc:
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView;
@end


@interface IMGLYPhotoEditViewController (SWIFT_EXTENSION(imglyKit)) <IMGLYPhotoEditToolControllerDelegate>

/// :nodoc:
- (IMGLYPhotoEditRenderer * _Nullable)photoEditToolControllerMainRenderer:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// :nodoc:
- (UIImage * _Nullable)photoEditToolControllerBaseImage:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// :nodoc:
- (UIScrollView * _Nullable)photoEditToolControllerPreviewViewScrollingContainer:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// :nodoc:
- (UIView * _Nullable)photoEditToolControllerPreviewView:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// :nodoc:
- (UIView * _Nullable)photoEditToolControllerOverlayContainerView:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// :nodoc:
- (NSArray<UIView *> * _Nullable)photoEditToolControllerOverlayViews:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// :nodoc:
- (IMGLYFrameController * _Nullable)photoEditToolControllerFrameController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// :nodoc:
- (void)photoEditToolControllerDidFinish:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// :nodoc:
- (void)photoEditToolController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController didDiscardChangesInFavorOfPhotoEditModel:(IMGLYPhotoEditModel * _Nonnull)photoEditModel;

/// :nodoc:
- (void)photoEditToolController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController didChangeToOrientation:(IMGLYOrientation)orientation fromOrientation:(IMGLYOrientation)fromOrientation;

/// :nodoc:
- (void)photoEditToolControllerDidChangePreferredRenderMode:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// :nodoc:
- (void)photoEditToolControllerDidChangeWantsDefaultPreviewView:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;

/// :nodoc:
- (void)photoEditToolController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController didAddOverlayView:(UIView * _Nonnull)view;

/// :nodoc:
- (void)photoEditToolController:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController didSelectToolController:(IMGLYPhotoEditToolController * _Nonnull)toolController;

/// :nodoc:
- (UIView * _Nullable)photoEditToolControllerSelectedOverlayView:(IMGLYPhotoEditToolController * _Nonnull)photoEditToolController;
@end



/// The PhotoEditViewControllerDelegate protocol defines methods that allow you respond to the events of an instance of PhotoEditViewController.
SWIFT_PROTOCOL_NAMED("PhotoEditViewControllerDelegate")
@protocol IMGLYPhotoEditViewControllerDelegate

/// Called when a new tool was selected.
///
/// \param photoEditViewController The photo edit view controller that was used to select the new tool.
///
/// \param toolController The tool that was selected.
///
/// \param replaceTopToolController Whether or not the tool controller should be placed above the previous tool or whether it should be replaced.
- (void)photoEditViewController:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController didSelectToolController:(IMGLYPhotoEditToolController * _Nonnull)toolController wantsCurrentTopToolControllerReplaced:(BOOL)replaceTopToolController;

/// Called when a tool should be dismissed.
///
/// \param photoEditViewController The photo edit view controller that was used to dismiss the tool.
- (void)photoEditViewControllerPopToolController:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController;

/// The currently active editing tool.
///
/// \param photoEditViewController The photo edit view controller that is asking for the active editing tool.
///
/// \returns  An instance of <code>PhotoEditToolController
/// </code> that is currently at the top.
- (IMGLYPhotoEditToolController * _Nullable)photoEditViewControllerCurrentEditingTool:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController;

/// Called when the output image was generated.
///
/// \param photoEditViewController The photo edit view controller that created the output image.
///
/// \param image The output image that was generated.
- (void)photoEditViewController:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController didSaveImage:(UIImage * _Nonnull)image;

/// Called when the output image could not be generated.
///
/// \param photoEditViewController The photo edit view controller that was unable to generate the output image.
- (void)photoEditViewControllerDidFailToGeneratePhoto:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController;

/// Called when the user wants to dismiss the editor.
///
/// \param photoEditviewController The photo edit view controller that is asking to be cancelled.
- (void)photoEditViewControllerDidCancel:(IMGLYPhotoEditViewController * _Nonnull)photoEditviewController;
@end



/// Options for configuring a PhotoEditViewController.
SWIFT_CLASS_NAMED("PhotoEditViewControllerOptions")
@interface IMGLYPhotoEditViewControllerOptions : NSObject

/// The title of the main view. By default this will be displayed in the secondary toolbar.
@property (nonatomic, readonly, copy) NSString * _Nullable title;

/// The main view's background color. Defaults to the configuration's global background color.
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;

/// A configuration closure to configure the apply button displayed at the bottom right. Defaults to a checkmark icon.
@property (nonatomic, readonly, copy) void (^ _Nullable applyButtonConfigurationClosure)(UIButton * _Nonnull);

/// A configuration closure to configure the discard button displayed at the bottom left. Defaults to a cross icon.
@property (nonatomic, readonly, copy) void (^ _Nullable discardButtonConfigurationClosure)(UIButton * _Nonnull);

/// This closure allows further configuration of the action buttons. The closure is called for each action button and has the button and its corresponding action as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull, enum PhotoEditorAction);

/// This closure is called every time the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable photoEditorActionSelectedClosure)(enum PhotoEditorAction);

/// Controls if the user can zoom the preview image. Defaults to true.
@property (nonatomic, readonly) BOOL allowsPreviewImageZoom;

/// Sets the frame scaling behaviour. Defaults to .ScaleAspectFit.
@property (nonatomic, readonly) UIViewContentMode frameScaleMode;

/// Returns a newly allocated instance of a PhotoEditViewControllerOptions using the default builder.
///
/// \returns  An instance of a <code>PhotoEditViewControllerOptions
/// </code>.
- (nonnull instancetype)init;

/// Returns a newly allocated instance of a PhotoEditViewControllerOptions using the given builder.
///
/// \param builder A <code>PhotoEditViewControllerOptionsBuilder
/// </code> instance.
///
/// \returns  An instance of a <code>PhotoEditViewControllerOptions
/// </code>.
- (nonnull instancetype)initWithBuilder:(IMGLYPhotoEditViewControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end



/// The default PhotoEditViewControllerOptionsBuilder for PhotoEditViewControllerOptions.
SWIFT_CLASS_NAMED("PhotoEditViewControllerOptionsBuilder")
@interface IMGLYPhotoEditViewControllerOptionsBuilder : NSObject

/// The title of the main view. By default this will be displayed in the secondary toolbar.
@property (nonatomic, copy) NSString * _Nullable title;

/// The main view's background color. Defaults to the configuration's global background color.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;

/// A configuration closure to configure the apply button displayed at the bottom right. Defaults to a checkmark icon.
@property (nonatomic, copy) void (^ _Nullable applyButtonConfigurationClosure)(UIButton * _Nonnull);

/// A configuration closure to configure the discard button displayed at the bottom left. Defaults to a cross icon.
@property (nonatomic, copy) void (^ _Nullable discardButtonConfigurationClosure)(UIButton * _Nonnull);

/// This closure allows further configuration of the action buttons. The closure is called for each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(IMGLYIconCaptionCollectionViewCell * _Nonnull, enum PhotoEditorAction);

/// This closure is called every time the user selects an action.
@property (nonatomic, copy) void (^ _Nullable photoEditorActionSelectedClosure)(enum PhotoEditorAction);

/// Sets the frame scaling behaviour.
@property (nonatomic) UIViewContentMode frameScaleMode;

/// Controls if the user can zoom the preview image. Defaults to true.
@property (nonatomic) BOOL allowsPreviewImageZoom;

/// An array of PhotoEditorAction raw values wrapped in NSNumbers. Setting this property overrides any previously set values in allowedPhotoEditorActions with the corresponding PhotoEditorAction values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedPhotoEditorActionsAsNSNumbers;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The actions that can be used in an instance of PhotoEditViewController.
///
/// <ul><li>Crop:        Represents a tool to crop the image.</li><li>Orientation: Represents a tool to change the orientation of the image.</li><li>Filter:      Represents a tool to apply a filter to the image.</li><li>Adjust:      Represents a tool to adjust brightness, contrast and/or saturation of the image.</li><li>Text:        Represents a tool to add text to the image.</li><li>Sticker:     Represents a tool to add stickers to the image.</li><li>Focus:       Represents a tool to add a focus to the image.</li><li>Frame:       Represents a tool to add a frame to the image.</li><li>Magic:       Represents a tool to auto-enhance the image.</li><li>Separator:   Represents a visual separator between the actions.</li></ul>
typedef SWIFT_ENUM(NSInteger, PhotoEditorAction) {

/// Represents a tool to crop the image.
  PhotoEditorActionCrop = 0,

/// Represents a tool to change the orientation of the image.
  PhotoEditorActionOrientation = 1,

/// Represents a tool to apply a filter to the image.
  PhotoEditorActionFilter = 2,

/// Represents a tool to adjust brightness, contrast and/or saturation of the image.
  PhotoEditorActionAdjust = 3,

/// Represents a tool to add text to the image.
  PhotoEditorActionText = 4,

/// Represents a tool to add stickers to the image.
  PhotoEditorActionSticker = 5,

/// Represents a tool to add a focus to the image.
  PhotoEditorActionFocus = 6,

/// Represents a tool to add a frame to the image.
  PhotoEditorActionFrame = 7,

/// Represents a tool to auto-enhance the image.
  PhotoEditorActionMagic = 8,

/// Represents a visual separator between the actions.
  PhotoEditorActionSeparator = 9,
};



/// The PhotoEffect class describes an effect that can be applied to a photo.
SWIFT_CLASS_NAMED("PhotoEffect")
@interface IMGLYPhotoEffect : NSObject

/// The identifier of the effect.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;

/// The name of the CIFilter that should be used to apply this effect.
@property (nonatomic, readonly, copy) NSString * _Nullable CIFilterName;

/// The URL of the lut image that should be used to generate a color cube. This is only used if CIFilterName is CIColorCube or CIColorCubeWithColorSpace and options does not include a key named inputCubeData.
@property (nonatomic, readonly, strong) NSURL * _Nullable lutURL;

/// The name that is displayed to the user.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;

/// Additional options that should be passed to the CIFilter object that will be created when applying this effect.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable options;

/// Returns a newly initialized photo effect.
///
/// \param identifier An identifier that uniquely identifies the effect.
///
/// \param filterName The name of the <code>CIFilter
/// </code> that should be used to apply this effect.
///
/// \param lutURL The URL of the lut image that should be used to generate a color cube. This is only used if <code>filterName
/// </code> is <code>CIColorCube
/// </code> or <code>CIColorCubeWithColorSpace
/// </code> and <code>options
/// </code> does not include a key named <code>inputCubeData
/// </code>.
///
/// \param displayName The name that is displayed to the user.
///
/// \param options Additional options that should be passed to the <code>CIFilter
/// </code> object that will be created when applying this effect.
///
/// \returns  A newly initialized <code>PhotoEffect
/// </code> object.
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier CIFilterName:(NSString * _Nullable)filterName lutURL:(NSURL * _Nullable)lutURL displayName:(NSString * _Nonnull)displayName options:(NSDictionary<NSString *, id> * _Nullable)options OBJC_DESIGNATED_INITIALIZER;

/// Returns a newly initialized photo effect that uses a CIColorCubeWithColorSpace filter and the LUT at url lutURL to generate the color cube data.
///
/// \param identifier An identifier that uniquely identifies the effect.
///
/// \param lutURL The URL of the lut image that should be used to generate a color cube.
///
/// \param displayName The name that is displayed to the user.
///
/// \returns  A newly initialized <code>PhotoEffect
/// </code> object.
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier lutURL:(NSURL * _Nullable)lutURL displayName:(NSString * _Nonnull)displayName OBJC_DESIGNATED_INITIALIZER;

/// Returns a new CIFilter object with the given name and options.
@property (nonatomic, readonly, strong) CIFilter * _Nullable newEffectFilter;

/// Change this array to only support a subset of all available filters or to include custom filters. By default this array includes all available filters.
+ (NSArray<IMGLYPhotoEffect *> * _Nonnull)allEffects;
+ (void)setAllEffects:(NSArray<IMGLYPhotoEffect *> * _Nonnull)value;

/// This method returns the photo effect with the given identifier if such an effect exists.
///
/// \param identifier The identifier of the photo effect.
///
/// \returns  A <code>PhotoEffect
/// </code> object.
+ (IMGLYPhotoEffect * _Nullable)effectWithIdentifier:(NSString * _Nonnull)identifier;
@end



/// A PhotoEffectThumbnailRenderer can be used to generate thumbnails of a given input image for multiple photo effects.
SWIFT_CLASS_NAMED("PhotoEffectThumbnailRenderer")
@interface IMGLYPhotoEffectThumbnailRenderer : NSObject

/// The input image that will be used to generate the thumbnails.
@property (nonatomic, readonly, strong) UIImage * _Nonnull inputImage;

/// Returns a newly initialized photo effect thumbnail renderer with the given input image.
///
/// \param inputImage The input image that will be used to generate the thumbnails.
///
/// \returns  A newly initialized <code>PhotoEffectThumbnailRenderer
/// </code> object.
- (nonnull instancetype)initWithInputImage:(UIImage * _Nonnull)inputImage OBJC_DESIGNATED_INITIALIZER;

/// Generates thumbnails for multiple photo effects of the given size.
///
/// \param photoEffects The photo effects that should be used to generate thumbnails.
///
/// \param size The size of the thumbnails.
///
/// \param singleCompletion This handler will be called for each thumbnail that has been created successfully.
- (void)generateThumbnailsForPhotoEffects:(NSArray<IMGLYPhotoEffect *> * _Nonnull)photoEffects ofSize:(CGSize)size singleCompletion:(void (^ _Nonnull)(UIImage * _Nonnull thumbnail, NSInteger index))singleCompletion;
@end



/// A ProgressView is an activity indicator that is shown on top of all other views in a HUD style and temporarily blocks all user interaction with other views.
SWIFT_CLASS_NAMED("ProgressView")
@interface IMGLYProgressView : NSObject

/// The main container view of the progress view.
@property (nonatomic, strong) UIView * _Nonnull overlayView;

/// The background view that is being animated in.
@property (nonatomic, strong) UIView * _Nonnull backgroundView;

/// The image view that holds the spinner.
@property (nonatomic, strong) UIImageView * _Nonnull imageView;

/// The label that contains the loading message.
@property (nonatomic, strong) UILabel * _Nonnull label;

/// The duration of one rotation of the spinner.
@property (nonatomic) double animationDuration;

/// The text that should be displayed in the progress view.
@property (nonatomic, copy) NSString * _Nonnull text;

/// A shared instance for convenience.
+ (IMGLYProgressView * _Nonnull)sharedView;

/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Presents the activity indicator with the given message.
///
/// \param message The message to present.
- (void)showWithMessage:(NSString * _Nonnull)message;

/// Hides the activity indicator.
- (void)hide;
@end



/// Applies a radial focus to an instance of CIImage.
SWIFT_CLASS_NAMED("RadialFocusFilter")
@interface IMGLYRadialFocusFilter : CIFilter

/// The input image.
@property (nonatomic, strong) CIImage * _Nullable inputImage;

/// The first normalized control point of the focus. This control point should use the coordinate system of Core Image, which means that (0,0) is at the top left.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint1;

/// The second normalized control point of the focus. This control point should use the coordinate system of Core Image, which means that (0,0) is at the top left.
@property (nonatomic, strong) NSValue * _Nullable inputNormalizedControlPoint2;

/// The blur radius to use for focus. Default is 4.
@property (nonatomic, strong) NSNumber * _Nullable inputRadius;

/// :nodoc:
- (void)setDefaults;

/// :nodoc:
@property (nonatomic, readonly, strong) CIImage * _Nullable outputImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// The RecordingMode determins if a photo or a video should be recorded.
typedef SWIFT_ENUM(NSInteger, RecordingMode) {

/// Record a Photo.
  RecordingModePhoto = 0,

/// Record a Video.
  RecordingModeVideo = 1,
};

@protocol IMGLYTokenProvider;


/// An implementation of FramesDataSourceProtocol that can be used to download frames from a remote source.
SWIFT_CLASS_NAMED("RemoteFramesDataSource")
@interface IMGLYRemoteFramesDataSource : NSObject <IMGLYFramesDataSourceProtocol>

/// The placeholder string that will be replaced by the token of the token provider.
+ (NSString * _Nonnull)TokenString;

/// A FrameStore that is used by this class. It defaults to the sharedStore.
@property (nonatomic, strong) id <IMGLYFrameStoreProtocol> _Nonnull frameStore;

/// The URL used for the call use ##Token## as place holder for a token that is set by a token provider.
@property (nonatomic, copy) NSString * _Nonnull url;

/// An object that implements the TokenProvider protocol.
@property (nonatomic, strong) id <IMGLYTokenProvider> _Nullable tokenProvider;

/// The count of frames.
///
/// \param completionBlock A completion block.
- (void)frameCount:(float)ratio completionBlock:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completionBlock;

/// Returns the thumbnail and label of the frame at a given index for the ratio.
///
/// \param index The index of the frame.
///
/// \param ratio The ratio of the image.
///
/// \param completionBlock Used to return the result asynchronously.
- (void)thumbnailAndLabelAtIndex:(NSInteger)index ratio:(float)ratio completionBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSString * _Nullable, NSError * _Nullable))completionBlock;

/// Retrieves a the frame at the given index.
///
/// \param index A index.
///
/// \param completionBlock A completion block.
- (void)frameAtIndex:(NSInteger)index ratio:(float)ratio completionBlock:(void (^ _Nonnull)(IMGLYFrame * _Nullable, NSError * _Nullable))completionBlock;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class IMGLYSticker;


/// An object that adopts the StickersDataSourceProtocol protocol is responsible for providing the data that is required to display and add stickers to an image.
SWIFT_PROTOCOL_NAMED("StickersDataSourceProtocol")
@protocol IMGLYStickersDataSourceProtocol

/// Returns the total count of stickers.
///
/// \param completionBlock Used to return the result asynchronously.
- (void)stickerCount:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completionBlock;

/// Returns the thumbnail image and the label for a sticker.
///
/// \param index The index of the sticker.
///
/// \param completionBlock Used to return the result asynchronously.
- (void)thumbnailAndLabelAtIndex:(NSInteger)index completionBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSString * _Nullable, NSError * _Nullable))completionBlock;

/// Returns the sticker at a given index.
///
/// \param index The index of the sticker.
///
/// \param completionBlock Used to return the result asynchronously.
- (void)stickerAtIndex:(NSInteger)index completionBlock:(void (^ _Nonnull)(IMGLYSticker * _Nullable, NSError * _Nullable))completionBlock;
@end

@protocol IMGLYStickerStoreProtocol;


/// An implementation of StickersDataSourceProtocol that can be used to download stickers from a remote source.
SWIFT_CLASS_NAMED("RemoteStickersDataSource")
@interface IMGLYRemoteStickersDataSource : NSObject <IMGLYStickersDataSourceProtocol>

/// The placeholder string that will be replaced by the token of the token provider.
+ (NSString * _Nonnull)TokenString;

/// A StickerStore that is used by this class. It defaults to the sharedStore.
@property (nonatomic, strong) id <IMGLYStickerStoreProtocol> _Nonnull stickerStore;

/// A ImageStore that is used by this class. It defaults to the sharedStore.
@property (nonatomic, strong) IMGLYImageStore * _Nonnull imageStore;

/// The URL used for the call use ##Token## as place holder for a token that is set by a token provider.
@property (nonatomic, copy) NSString * _Nonnull url;

/// An object that implements the TokenProvider protocol.
@property (nonatomic, strong) id <IMGLYTokenProvider> _Nullable tokenProvider;

/// The count of stickers.
///
/// \param completionBlock A completion block.
- (void)stickerCount:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completionBlock;

/// Retrieves a the sticker at the given index.
///
/// \param index A index.
///
/// \param completionBlock A completion block.
- (void)stickerAtIndex:(NSInteger)index completionBlock:(void (^ _Nonnull)(IMGLYSticker * _Nullable, NSError * _Nullable))completionBlock;

/// Thumbnail and label at the given index.
///
/// \param index A index.
///
/// \param completionBlock A completion block.
- (void)thumbnailAndLabelAtIndex:(NSInteger)index completionBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSString * _Nullable, NSError * _Nullable))completionBlock;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A request service is used to perform a get request and hand the data over via block.
SWIFT_PROTOCOL_NAMED("RequestServiceProtocol")
@protocol IMGLYRequestServiceProtocol

/// Used to perform a get request to the given url.
///
/// \param url The url of the request.
///
/// \param cached Whether or not the request should be cached.
///
/// \param callback Called with the result of the request.
- (void)get:(NSURL * _Nonnull)url cached:(BOOL)cached callback:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))callback;
@end



/// The RequestService is out to perform a get request and hand the data over via block.
SWIFT_CLASS_NAMED("RequestService")
@interface IMGLYRequestService : NSObject <IMGLYRequestServiceProtocol>

/// Performs a get request.
///
/// \param url A url as <code>String
/// </code>.
///
/// \param callback A callback that gets the retieved data or the occured error.
- (void)get:(NSURL * _Nonnull)url cached:(BOOL)cached callback:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// A SaturationBrightnessPickerView presents a view that can be dragged to select the saturation within an instance of ColorPickerView.
SWIFT_CLASS_NAMED("SaturationBrightnessPickerView")
@interface IMGLYSaturationBrightnessPickerView : UIView

/// The receiver’s delegate.\See 
///
/// <code>SaturationBrightnessPickerViewDelegate
/// </code>.
@property (nonatomic, weak) id <IMGLYSaturationBrightnessPickerViewDelegate> _Nullable pickerDelegate;

/// The currently picked hue.
@property (nonatomic) CGFloat hue;

/// The currently picked color.
@property (nonatomic, strong) UIColor * _Nonnull color;

/// The currently picked saturation.
@property (nonatomic) CGFloat saturation;

/// The currently picked brightness.
@property (nonatomic) CGFloat brightness;

/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)drawRect:(CGRect)rect;

/// :nodoc:
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// :nodoc:
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// :nodoc:
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end




/// A SeparatorCollectionViewCell is a cell that shows a single 1 pt wide vertical line. It is usually used to represent a seperator between other cells.
SWIFT_CLASS_NAMED("SeparatorCollectionViewCell")
@interface IMGLYSeparatorCollectionViewCell : UICollectionViewCell

/// A vertical line 1 pt wide line in the center of the cell.
@property (nonatomic, readonly, strong) UIView * _Nonnull separator;

/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/// A Slider object is a visual control used to select a single value from a continuous range of values. Sliders are always displayed as horizontal bars. An indicator, or thumb, notes the current value of the slider and can be moved by the user to change the setting. A vertical indicator, or neutral point, notes the default, unchanged value of the slider.
SWIFT_CLASS_NAMED("Slider")
@interface IMGLYSlider : UIControl

/// The color used to tint the thumb image. If no color is set, the default tintColor will be used.
@property (nonatomic, strong) UIColor * _Nullable thumbTintColor;

/// The color used to tint the neutral point image. If no color is set, the default tintColor will be used.
@property (nonatomic, strong) UIColor * _Nullable neutralPointTintColor;

/// The color used to tint the filled track. If no color is set, the default tintColor will be used.
@property (nonatomic, strong) UIColor * _Nullable filledTrackColor;

/// The color used to tint the unfilled track.
@property (nonatomic, strong) UIColor * _Nonnull unfilledTrackColor;

/// Contains the minimum value of the receiver.
@property (nonatomic) CGFloat minimumValue;

/// Contains the maximum value of the receiver.
@property (nonatomic) CGFloat maximumValue;

/// Contains the neutral value of the receiver.
@property (nonatomic) CGFloat neutralValue;

/// Contains the receiver’s current value.
@property (nonatomic) CGFloat value;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)accessibilityIncrement;

/// :nodoc:
- (void)accessibilityDecrement;

/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;

/// :nodoc:
- (void)layoutSubviews;

/// :nodoc:
- (CGSize)intrinsicContentSize;

/// :nodoc:
- (void)tintColorDidChange;

/// Returns the drawing rectangle for the slider’s track.
///
/// \param bounds The bounding rectangle of the receiver.
///
/// \returns  The computed drawing rectangle for the track. This rectangle corresponds to the entire length of the track between the minimum and maximum values.
- (CGRect)trackRectForBounds:(CGRect)bounds;

/// Returns the drawing rectangle for the slider’s thumb image.
///
/// \param bounds The bounding rectangle of the receiver.
///
/// \param value The current value of the slider.
///
/// \returns  The computed drawing rectangle for the thumb image.
- (CGRect)thumbRectForBounds:(CGRect)bounds value:(CGFloat)value;

/// Returns the drawing rectangle of the slider's neutral point image.
///
/// \param bounds The bounding rectangle of the receiver.
///
/// \returns  The computed drawing rectangle for the neutral point image.
- (CGRect)neutralPointRectForBounds:(CGRect)bounds;

/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// :nodoc:
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event;

/// :nodoc:
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event;

/// :nodoc:
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event;

/// :nodoc:
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
@end

@class NSAttributedString;


/// A SliderTooltip object is a visual element that displays a Slider's current value above the thumb image while dragging.
SWIFT_CLASS("_TtC8imglyKit13SliderTooltip")
@interface SliderTooltip : UIView

/// The background color of the tooltip.
@property (nonatomic, strong) UIColor * _Nonnull tooltipColor;

/// The string to display in the tooltip.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedString;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)drawRect:(CGRect)rect;

/// :nodoc:
- (CGSize)intrinsicContentSize;
@end



/// The Sticker class holds all informations needed to be managed and rendered.
SWIFT_CLASS_NAMED("Sticker")
@interface IMGLYSticker : NSObject

/// The image URL of the sticker.
@property (nonatomic, readonly, strong) NSURL * _Nullable imageURL;

/// The thumbnail URL of the sticker.
@property (nonatomic, readonly, strong) NSURL * _Nullable thumbnailURL;

/// The image of the sticker.
@property (nonatomic, readonly, strong) UIImage * _Nullable image;

/// The thumbnail image of the sticker.
@property (nonatomic, readonly, strong) UIImage * _Nullable thumbnail;

/// The text that is read out when accessibility is enabled.
@property (nonatomic, readonly, copy) NSString * _Nullable accessibilityText;

/// Returns a newly allocated instance of a Sticker.
///
/// This initializer creates an instance of <code>Sticker
/// </code> that loads its image and its thumbnail image from
/// an <code>NSURL
/// </code> when needed. That image is then placed in a cache, that is purged when a memory warning is
/// received.
///
/// \param imageURL The url of an image. This can either be in your bundle or remote.
///
/// \param thumbnailURL The thumbnail url of an image. This can either be in your bundle or remote.
///
/// \param accessibilityText The accessibility text that describes this sticker.
///
/// \returns  An instance of <code>Sticker
/// </code>.
- (nonnull instancetype)initWithImageURL:(NSURL * _Nonnull)imageURL thumbnailURL:(NSURL * _Nonnull)thumbnailURL accessibilityText:(NSString * _Nullable)accessibilityText OBJC_DESIGNATED_INITIALIZER;

/// Returns a newly allocated instance of a Sticker.
///
/// This initializer creates an instance of <code>Sticker
/// </code> which already has an image and thumbnail image
/// associated. This image is <em>not</em> placed in a cache by this SDK. If you choose to use this initializer,
/// then you should create the <code>UIImage
/// </code>s that you pass with <code>init(named:)
/// </code> or <code>init(named:inBundle:compatibleWithTraitCollection:)
/// </code>,
/// so that they are added to the system cache and automatically purged when memory is low.
///
/// \param image The image to use for this sticker.
///
/// \param thumbnail The thumbnail image to use for this sticker.
///
/// \param accessibilityText The accessibility text that describes this sticker.
///
/// \returns  An instance of <code>Sticker
/// </code>.
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image thumbnail:(UIImage * _Nonnull)thumbnail accessibilityText:(NSString * _Nullable)accessibilityText OBJC_DESIGNATED_INITIALIZER;

/// Gets the image of the sticker.
///
/// \param completionBlock A completion block.
- (void)image:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completionBlock;

/// Gets the thumbmail of the sticker.
///
/// \param completionBlock A completion block.
- (void)thumbnail:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completionBlock;
@end


/// The actions that can be used in an instance of StickerToolControllerOptions.
///
/// <ul><li>Delete:           Delete the sticker.</li><li>BringToFront:     Bring the sticker to the front.</li><li>FlipHorizontally: Flip the sticker horizontally.</li><li>FlipVertically:   Flip the sticker vertically.</li><li>Separator:        Represents a visual separator between the actions.</li></ul>
typedef SWIFT_ENUM(NSInteger, StickerContextAction) {

/// Delete the sticker.
  StickerContextActionDelete = 0,

/// Bring the sticker to the front.
  StickerContextActionBringToFront = 1,

/// Flip the sticker horizontally.
  StickerContextActionFlipHorizontally = 2,

/// Flip the sticker vertically.
  StickerContextActionFlipVertically = 3,

/// Represents a visual separator between the actions.
  StickerContextActionSeparator = 4,
};



/// A StickerImageView displays an instance of Sticker and provides improved support for accessibility.
SWIFT_CLASS_NAMED("StickerImageView")
@interface IMGLYStickerImageView : UIImageView

/// The sticker that this image view should display.
@property (nonatomic, readonly, strong) IMGLYSticker * _Nonnull sticker;

/// Called by accessibility to make the image view smaller.
@property (nonatomic, copy) void (^ _Nullable decrementHandler)(void);

/// Called by accessibility to make the image view bigger.
@property (nonatomic, copy) void (^ _Nullable incrementHandler)(void);

/// Called by accessibility to rotate the image view to the left.
@property (nonatomic, copy) void (^ _Nullable rotateLeftHandler)(void);

/// Called by accessibility to rotate the image view to the right.
@property (nonatomic, copy) void (^ _Nullable rotateRightHandler)(void);

/// This property holds the normalized center of the view within the image without any crops added. It is used to calculate the correct position of the sticker within the preview view.
@property (nonatomic) CGPoint normalizedCenterInImage;

/// Returns a newly allocated instance of StickerImageView with the given sticker.
///
/// \param sticker The sticker that should be shown in this image view.
///
/// \returns  An instance of <code>StickerImageView
/// </code>.
- (nonnull instancetype)initWithSticker:(IMGLYSticker * _Nonnull)sticker OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)accessibilityDecrement;

/// :nodoc:
- (void)accessibilityIncrement;
@end



/// Represents a single sticker information retrieved via JSON.
SWIFT_CLASS_NAMED("StickerInfoRecord")
@interface IMGLYStickerInfoRecord : NSObject

/// The name of the image.
@property (nonatomic, copy) NSString * _Nonnull name;

/// The label of the sticker. This is used for accessibility.
@property (nonatomic, copy) NSString * _Nonnull accessibilityText;

/// An array of ImageInfoRecord representing the associated  images.
@property (nonatomic, strong) IMGLYImageInfoRecord * _Nonnull imageInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The JSONStore provides methods to retrieve JSON data from any URL.
SWIFT_PROTOCOL_NAMED("StickerStoreProtocol")
@protocol IMGLYStickerStoreProtocol

/// Retrieves StickerInfoRecord data, from the JSON located at the specified URL.
///
/// \param url A valid URL.
///
/// \param completionBlock A completion block.
- (void)get:(NSURL * _Nonnull)url completionBlock:(void (^ _Nonnull)(NSArray<IMGLYStickerInfoRecord *> * _Nullable, NSError * _Nullable))completionBlock;
@end



/// The JSONStore class provides methods to retrieve JSON data from any URL. It also caches the data due to efficiency, and performs a sanity check.
SWIFT_CLASS_NAMED("StickerStore")
@interface IMGLYStickerStore : NSObject <IMGLYStickerStoreProtocol>

/// A shared instance for convenience.
+ (IMGLYStickerStore * _Nonnull)sharedStore;

/// The json parser to use.
@property (nonatomic, strong) id <IMGLYJSONStickerParserProtocol> _Nonnull jsonParser;

/// This store is used to retrieve the JSON data.
@property (nonatomic, strong) id <IMGLYJSONStoreProtocol> _Nonnull jsonStore;

/// Retrieves StickerInfoRecord data, from the JSON located at the specified URL.
///
/// \param url A valid URL.
///
/// \param completionBlock A completion block.
- (void)get:(NSURL * _Nonnull)url completionBlock:(void (^ _Nonnull)(NSArray<IMGLYStickerInfoRecord *> * _Nullable, NSError * _Nullable))completionBlock;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// A StickerToolController is reponsible for displaying the UI to add stickers to an image.
SWIFT_CLASS_NAMED("StickerToolController")
@interface IMGLYStickerToolController : IMGLYPhotoEditToolController

/// :nodoc:
- (void)viewDidLoad;

/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;

/// :nodoc:
- (void)didBecomeActiveTool;

/// :nodoc:
- (void)willResignActiveTool;
- (nonnull instancetype)initWithPhotoEditModel:(IMGLYPhotoEditMutableModel * _Nonnull)photoEditModel configuration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYStickerToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>

/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYStickerToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>

/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;

/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;

/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end



/// Options for configuring a StickerToolController.
SWIFT_CLASS_NAMED("StickerToolControllerOptions")
@interface IMGLYStickerToolControllerOptions : IMGLYToolControllerOptions

/// An object conforming to StickersDataSourceProtocol. By default an instance of StickersDataSource offering all filters is used.
@property (nonatomic, readonly, strong) id <IMGLYStickersDataSourceProtocol> _Nonnull stickersDataSource;

/// This closure is called when the user adds a sticker.
@property (nonatomic, readonly, copy) void (^ _Nullable addedStickerClosure)(IMGLYSticker * _Nonnull);

/// This closure allows further configuration of the sticker buttons. The closure is called for each sticker button and has the button and its corresponding sticker as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable stickerButtonConfigurationClosure)(IMGLYIconCollectionViewCell * _Nonnull);

/// This closure allows further configuration of the context actions. The closure is called for each action and has the action and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable contextActionConfigurationClosure)(IMGLYContextMenuAction * _Nonnull, enum StickerContextAction);

/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable stickerActionSelectedClosure)(enum StickerContextAction);

/// This closure is called when the user removes a sticker.
@property (nonatomic, readonly, copy) void (^ _Nullable removedStickerClosure)(IMGLYSticker * _Nonnull);

/// Returns a newly allocated instance of a StickersToolControllerOptions using the default builder.
///
/// \returns  An instance of a <code>MainToolControllerOptions
/// </code>.
- (nonnull instancetype)init;

/// Returns a newly allocated instance of a StickersToolControllerOptions using the given builder.
///
/// \param builder A <code>StickersToolControllerOptionsBuilder
/// </code> instance.
///
/// \returns  An instance of a <code>StickersToolControllerOptions
/// </code>.
- (nonnull instancetype)initWithBuilder:(IMGLYStickerToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end



/// The default StickerToolControllerOptionsBuilder for StickerToolControllerOptions.
SWIFT_CLASS_NAMED("StickerToolControllerOptionsBuilder")
@interface IMGLYStickerToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder

/// An object conforming to StickersDataSourceProtocol. By default an instance of StickersDataSource offering all filters is used.
@property (nonatomic, strong) id <IMGLYStickersDataSourceProtocol> _Nonnull stickersDataSource;

/// This closure is called when the user adds a sticker.
@property (nonatomic, copy) void (^ _Nullable addedStickerClosure)(IMGLYSticker * _Nonnull);

/// This closure allows further configuration of the sticker buttons. The closure is called for each sticker button and has the button and its corresponding sticker as parameters.
@property (nonatomic, copy) void (^ _Nullable stickerButtonConfigurationClosure)(IMGLYIconCollectionViewCell * _Nonnull);

/// This closure allows further configuration of the context actions. The closure is called for each action and has the action and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable contextActionConfigurationClosure)(IMGLYContextMenuAction * _Nonnull, enum StickerContextAction);

/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable stickerActionSelectedClosure)(enum StickerContextAction);

/// This closure is called when the user removes a sticker.
@property (nonatomic, copy) void (^ _Nullable removedStickerClosure)(IMGLYSticker * _Nonnull);

/// An array of action raw values wrapped in NSNumbers. Setting this property overrides any previously set values in allowedStickerContextActions with the corresponding StickerContextAction values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedStickerContextActionsAsNSNumbers;

/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// An implementation of StickersDataSourceProtocol with all available stickers.
SWIFT_CLASS_NAMED("StickersDataSource")
@interface IMGLYStickersDataSource : NSObject <IMGLYStickersDataSourceProtocol>

/// Creates a custom datasource offering the given stickers.
- (nonnull instancetype)initWithStickers:(NSArray<IMGLYSticker *> * _Nonnull)stickers OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)stickerCount:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completionBlock;

/// :nodoc:
- (void)thumbnailAndLabelAtIndex:(NSInteger)index completionBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSString * _Nullable, NSError * _Nullable))completionBlock;

/// :nodoc:
- (void)stickerAtIndex:(NSInteger)index completionBlock:(void (^ _Nonnull)(IMGLYSticker * _Nullable, NSError * _Nullable))completionBlock;
@end



/// The actions that can be used in an instance of TextOptionsToolController.
///
/// <ul><li>SelectFont:            Change the font of the text.</li><li>SelectColor:           Change the color of the text.</li><li>SelectBackgroundColor: Change the color of the text's bounding box.</li><li>Separator:             Represents a visual separator between the actions.</li></ul>
typedef SWIFT_ENUM(NSInteger, TextAction) {

/// Change the font of the text.
  TextActionSelectFont = 0,

/// Change the color of the text.
  TextActionSelectColor = 1,

/// Change the color of the text's bounding box.
  TextActionSelectBackgroundColor = 2,

/// Represents a visual separator between the actions.
  TextActionSeparator = 3,
};



/// A TextButton is used within a FontSelectorView to present different fonts and their names.
SWIFT_CLASS_NAMED("TextButton")
@interface IMGLYTextButton : UIButton

/// The color of the label.
@property (nonatomic, strong) UIColor * _Nonnull labelColor;

/// The name of the font.
@property (nonatomic, copy) NSString * _Nonnull fontName;

/// :nodoc:
@property (nonatomic) CGRect frame;

/// The name that is shown to the user.
@property (nonatomic, copy) NSString * _Nonnull displayName;

/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

enum TextColorToolControllerMode : NSInteger;


/// A TextColorToolController is reponsible for displaying the UI to adjust the text color of text that has been added to an image.
SWIFT_CLASS_NAMED("TextColorToolController")
@interface IMGLYTextColorToolController : IMGLYPhotoEditToolController

/// The TextColorToolControllerMode that this tool is handling.
@property (nonatomic) enum TextColorToolControllerMode mode;

/// :nodoc:
- (void)viewDidLoad;

/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;

/// :nodoc:
@property (nonatomic, readonly) BOOL wantsScrollingInDefaultPreviewViewEnabled;

/// :nodoc:
- (void)didBecomeActiveTool;

/// :nodoc:
- (void)willResignActiveTool;
- (nonnull instancetype)initWithPhotoEditModel:(IMGLYPhotoEditMutableModel * _Nonnull)photoEditModel configuration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYTextColorToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>

/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
@end


@interface IMGLYTextColorToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>

/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYTextColorToolController (SWIFT_EXTENSION(imglyKit)) <IMGLYColorPickerViewDelegate>

/// :nodoc:
- (void)colorPicked:(IMGLYColorPickerView * _Nonnull)colorPickerView didPickColor:(UIColor * _Nonnull)color;

/// :nodoc:
- (void)canceledColorPicking:(IMGLYColorPickerView * _Nonnull)colorPickerView;
@end


@interface IMGLYTextColorToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>

/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;

/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;

/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/// The different modes that an instance of TextColorToolController can handle.
///
/// <ul><li>Foreground: The mode to handle the foreground appearance of the text.</li><li>Background: The mode to handle the background appearance of the text.</li></ul>
typedef SWIFT_ENUM(NSInteger, TextColorToolControllerMode) {

/// The mode to handle the foreground appearance of the text.
  TextColorToolControllerModeForeground = 0,

/// The mode to handle the background appearance of the text.
  TextColorToolControllerModeBackground = 1,
};



/// Options for configuring a TextColorToolController.
SWIFT_CLASS_NAMED("TextColorToolControllerOptions")
@interface IMGLYTextColorToolControllerOptions : IMGLYToolControllerOptions

/// A list of colors that is available in the text color dialog. This property is optional.
@property (nonatomic, readonly, copy) NSArray<UIColor *> * _Nullable availableFontColors;

/// A list of color-names that is available in the text color dialog. This property is optional.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable availableFontColorNames;

/// This closure allows further configuration of the action buttons. The closure is called for each action button and has the button and its corresponding color and color name as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable textColorActionButtonConfigurationClosure)(IMGLYColorCollectionViewCell * _Nonnull, UIColor * _Nonnull, NSString * _Nonnull);

/// This closure is called every time the user selects an action
@property (nonatomic, readonly, copy) void (^ _Nullable textColorActionSelectedClosure)(UIColor * _Nonnull, NSString * _Nonnull);

/// Returns a newly allocated instance of TextColorToolControllerOptions using the default builder.
///
/// \returns  An instance of <code>TextColorToolControllerOptions
/// </code>.
- (nonnull instancetype)init;

/// Returns a newly allocated instance of TextColorToolControllerOptions using the given builder.
///
/// \param builder A <code>TextColorToolControllerOptionsBuilder
/// </code> instance.
///
/// \returns  An instance of <code>TextColorToolControllerOptions
/// </code>.
- (nonnull instancetype)initWithBuilder:(IMGLYTextColorToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end



/// The default TextColorToolControllerOptionsBuilder for TextColorToolControllerOptions.
SWIFT_CLASS_NAMED("TextColorToolControllerOptionsBuilder")
@interface IMGLYTextColorToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder

/// A list of colors that is available in the text color dialog. This property is optional.
@property (nonatomic, copy) NSArray<UIColor *> * _Nullable availableFontColors;

/// A list of color-names that is available in the text color dialog. This property is optional.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable availableFontColorNames;

/// This closure allows further configuration of the action buttons. The closure is called for each action button and has the button and its corresponding color and color name as parameters.
@property (nonatomic, copy) void (^ _Nullable textColorActionButtonConfigurationClosure)(IMGLYColorCollectionViewCell * _Nonnull, UIColor * _Nonnull, NSString * _Nonnull);

/// This closure is called every time the user selects an action
@property (nonatomic, copy) void (^ _Nullable textColorActionSelectedClosure)(UIColor * _Nonnull, NSString * _Nonnull);

/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The context actions that can be used in an instance of TextOptionsToolController.
///
/// <ul><li>Delete:                Delete the text.</li><li>BringToFront:          Bring the text to the front.</li><li>Separator:             Represents a visual separator between the actions.</li></ul>
typedef SWIFT_ENUM(NSInteger, TextContextAction) {

/// Delete the text.
  TextContextActionDelete = 0,

/// Bring the text to the front.
  TextContextActionBringToFront = 1,

/// Represents a visual separator between the actions.
  TextContextActionSeparator = 2,
};



/// A TextFontToolController is reponsible for displaying the UI to adjust the font of text that has been added to an image.
SWIFT_CLASS_NAMED("TextFontToolController")
@interface IMGLYTextFontToolController : IMGLYPhotoEditToolController

/// :nodoc:
- (void)viewDidLoad;

/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;

/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;

/// :nodoc:
@property (nonatomic, readonly) BOOL wantsScrollingInDefaultPreviewViewEnabled;

/// :nodoc:
- (void)didBecomeActiveTool;

/// :nodoc:
- (void)willResignActiveTool;
- (nonnull instancetype)initWithPhotoEditModel:(IMGLYPhotoEditMutableModel * _Nonnull)photoEditModel configuration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYTextFontToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>

/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;
@end


@interface IMGLYTextFontToolController (SWIFT_EXTENSION(imglyKit)) <IMGLYFontSelectorViewDelegate>

/// :nodoc:
- (void)fontSelectorView:(IMGLYFontSelectorView * _Nonnull)fontSelectorView didSelectFontWithName:(NSString * _Nonnull)fontName;
@end


@interface IMGLYTextFontToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>

/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYTextFontToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>

/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;

/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;

/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end



/// Options for configuring a TextFontToolController.
SWIFT_CLASS_NAMED("TextFontToolControllerOptions")
@interface IMGLYTextFontToolControllerOptions : IMGLYToolControllerOptions

/// This closure allows further configuration of the action buttons. The closure is called for each action button and has the button and its corresponding action as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(IMGLYLabelCaptionCollectionViewCell * _Nonnull, NSString * _Nonnull);

/// This closure is called every time the user selects a crop ratio.
@property (nonatomic, readonly, copy) void (^ _Nullable textFontActionSelectedClosure)(NSString * _Nonnull);

/// Returns a newly allocated instance of TextFontToolControllerOptions using the default builder.
///
/// \returns  An instance of <code>TextFontToolControllerOptions
/// </code>.
- (nonnull instancetype)init;

/// Returns a newly allocated instance of TextColorToolControllerOptions using the given builder.
///
/// \param builder A <code>TextColorToolControllerOptionsBuilder
/// </code> instance.
///
/// \returns  An instance of <code>TextColorToolControllerOptions
/// </code>.
- (nonnull instancetype)initWithBuilder:(IMGLYTextFontToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end



/// The default TextFontToolControllerOptionsBuilder for TextFontToolControllerOptions.
SWIFT_CLASS_NAMED("TextFontToolControllerOptionsBuilder")
@interface IMGLYTextFontToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder

/// This closure allows further configuration of the action buttons. The closure is called for each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(IMGLYLabelCaptionCollectionViewCell * _Nonnull, NSString * _Nonnull);

/// This closure is called every time the user selects a crop ratio.
@property (nonatomic, copy) void (^ _Nullable textFontActionSelectedClosure)(NSString * _Nonnull);

/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A TextLabel is used to show text that has been added to an image and provides improved support for accessibility.
SWIFT_CLASS_NAMED("TextLabel")
@interface IMGLYTextLabel : UILabel

/// Called by accessibility to select this label.
@property (nonatomic, copy) void (^ _Nullable activateHandler)(void);

/// Called by accessibility to make this label smaller.
@property (nonatomic, copy) void (^ _Nullable decrementHandler)(void);

/// Called by accessibility to make this label bigger.
@property (nonatomic, copy) void (^ _Nullable incrementHandler)(void);

/// Called by accessibility to rotate this label to the left.
@property (nonatomic, copy) void (^ _Nullable rotateLeftHandler)(void);

/// Called by accessibility to rotate this label to the right.
@property (nonatomic, copy) void (^ _Nullable rotateRightHandler)(void);

/// Called by accessibility to change the text of this label.
@property (nonatomic, copy) void (^ _Nullable changeTextHandler)(void);

/// This property holds the normalized center of the view within the image without any crops added. It is used to calculate the correct position of the label within the preview view.
@property (nonatomic) CGPoint normalizedCenterInImage;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (BOOL)accessibilityActivate;

/// :nodoc:
- (void)accessibilityDecrement;

/// :nodoc:
- (void)accessibilityIncrement;
@end



/// A TextOptionsToolController is reponsible for displaying the UI to adjust text that has been added to an image.
SWIFT_CLASS_NAMED("TextOptionsToolController")
@interface IMGLYTextOptionsToolController : IMGLYPhotoEditToolController

/// :nodoc:
- (void)viewDidLoad;

/// :nodoc:
@property (nonatomic, readonly) BOOL wantsScrollingInDefaultPreviewViewEnabled;

/// :nodoc:
- (void)didBecomeActiveTool;

/// :nodoc:
- (void)willResignActiveTool;

/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;

/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithPhotoEditModel:(IMGLYPhotoEditMutableModel * _Nonnull)photoEditModel configuration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface IMGLYTextOptionsToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegate>

/// :nodoc:
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYTextOptionsToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDelegateFlowLayout>

/// :nodoc:
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section;

/// :nodoc:
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface IMGLYTextOptionsToolController (SWIFT_EXTENSION(imglyKit)) <UICollectionViewDataSource>

/// :nodoc:
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;

/// :nodoc:
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;

/// :nodoc:
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end



/// Options for configuring a TextOptionsToolController.
SWIFT_CLASS_NAMED("TextOptionsToolControllerOptions")
@interface IMGLTextOptionsToolControllerOptions : IMGLYToolControllerOptions

/// This closure allows further configuration of the action buttons. The closure is called for each action button and has the button and its corresponding action as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable actionButtonConfigurationClosure)(UICollectionViewCell * _Nonnull, enum TextAction);

/// This closure allows further configuration of the context actions. The closure is called for each action and has the action and its corresponding enum value as parameters.
@property (nonatomic, readonly, copy) void (^ _Nullable contextActionConfigurationClosure)(IMGLYContextMenuAction * _Nonnull, enum TextContextAction);

/// This closure is called when the user selects an action.
@property (nonatomic, readonly, copy) void (^ _Nullable textActionSelectedClosure)(enum TextAction);

/// This closure is called when the user selects a context menu action.
@property (nonatomic, readonly, copy) void (^ _Nullable textContextActionSelectedClosure)(enum TextContextAction);

/// Returns a newly allocated instance of TextOptionsToolControllerOptions using the default builder.
///
/// \returns  An instance of <code>TextOptionsToolControllerOptions
/// </code>.
- (nonnull instancetype)init;

/// Returns a newly allocated instance of TextOptionsToolControllerOptions using the given builder.
///
/// \param builder A <code>TextOptionsToolControllerOptionsBuilder
/// </code> instance.
///
/// \returns  An instance of <code>TextOptionsToolControllerOptions
/// </code>.
- (nonnull instancetype)initWithBuilder:(IMGLYTextOptionsToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end



/// The default TextOptionsToolControllerOptionsBuilder for TextOptionsToolControllerOptions.
SWIFT_CLASS_NAMED("TextOptionsToolControllerOptionsBuilder")
@interface IMGLYTextOptionsToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder

/// This closure allows further configuration of the action buttons. The closure is called for each action button and has the button and its corresponding action as parameters.
@property (nonatomic, copy) void (^ _Nullable actionButtonConfigurationClosure)(UICollectionViewCell * _Nonnull, enum TextAction);

/// This closure allows further configuration of the context actions. The closure is called for each action and has the action and its corresponding enum value as parameters.
@property (nonatomic, copy) void (^ _Nullable contextActionConfigurationClosure)(IMGLYContextMenuAction * _Nonnull, enum TextContextAction);

/// This closure is called when the user selects an action.
@property (nonatomic, copy) void (^ _Nullable textActionSelectedClosure)(enum TextAction);

/// This closure is called when the user selects a context menu action.
@property (nonatomic, copy) void (^ _Nullable textContextActionSelectedClosure)(enum TextContextAction);

/// An array of TextAction raw values wrapped in NSNumbers. Setting this property overrides any previously set values in allowedTextActions with the corresponding TextAction values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTextActionsAsNSNumbers;

/// An array of TextContextAction raw values wrapped in NSNumbers. Setting this property overrides any previously set values in allowedTextContextActions with the corresponding TextContextAction values.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull allowedTextContextActionsAsNSNumbers;

/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A TextToolController is reponsible for displaying the UI to add text to an image.
SWIFT_CLASS_NAMED("TextToolController")
@interface IMGLYTextToolController : IMGLYPhotoEditToolController

/// :nodoc:
- (void)viewDidLoad;

/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;

/// :nodoc:
- (void)updateViewConstraints;

/// :nodoc:
- (void)didBecomeActiveTool;

/// :nodoc:
- (void)willResignActiveTool;
- (nonnull instancetype)initWithPhotoEditModel:(IMGLYPhotoEditMutableModel * _Nonnull)photoEditModel configuration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextField;

@interface IMGLYTextToolController (SWIFT_EXTENSION(imglyKit)) <UITextFieldDelegate>

/// :nodoc:
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField;
@end



/// Options for configuring a TextToolController.
SWIFT_CLASS_NAMED("TextToolControllerOptions")
@interface IMGLYTextToolControllerOptions : IMGLYToolControllerOptions

/// Use this closure to configure the text input field. Defaults to an empty implementation.
@property (nonatomic, readonly, copy) void (^ _Nullable textFieldConfigurationClosure)(UITextField * _Nonnull);

/// Returns a newly allocated instance of a MainToolControllerOptions using the default builder.
///
/// \returns  An instance of a <code>MainToolControllerOptions
/// </code>.
- (nonnull instancetype)init;

/// Returns a newly allocated instance of a TextToolControllerOptions using the given builder.
///
/// \param builder A <code>TextToolControllerOptionsBuilder
/// </code> instance.
///
/// \returns  An instance of a <code>TextToolControllerOptions
/// </code>.
- (nonnull instancetype)initWithBuilder:(IMGLYTextToolControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end



/// The default TextToolControllerOptionsBuilder for TextToolControllerOptions.
SWIFT_CLASS_NAMED("TextToolControllerOptionsBuilder")
@interface IMGLYTextToolControllerOptionsBuilder : IMGLYToolControllerOptionsBuilder

/// Use this closure to configure the text input field.
@property (nonatomic, copy) void (^ _Nullable textFieldConfigurationClosure)(UITextField * _Nonnull);

/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// This protocol is used to get tokens and insert them into the called url. That way we can deal with urls that contain tokens.
SWIFT_PROTOCOL_NAMED("TokenProvider")
@protocol IMGLYTokenProvider

/// Returns a token that is used to perform an API call.
///
/// \param completionBlock A completion block that has the token or an error as payload.
- (void)getToken:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionBlock;
@end





/// An instance of ToolStackController manages the presentation and dismissal of PhotoEditToolController instances onto an instance of a PhotoEditViewController.
SWIFT_CLASS_NAMED("ToolStackController")
@interface IMGLYToolStackController : UIViewController

/// The receiver's delegate.\See 
///
/// <code>ToolStackControllerDelegate
/// </code>.
@property (nonatomic, weak) id <IMGLYToolStackControllerDelegate> _Nullable delegate;

/// The PhotoEditViewController that acts as the root view controller.
@property (nonatomic, readonly, strong) IMGLYPhotoEditViewController * _Nonnull photoEditViewController;

/// The tools that are currently on the stack. The top controller is at index n-1, where n is the number of items in the array.
@property (nonatomic, readonly, copy) NSArray<IMGLYPhotoEditToolController *> * _Nonnull toolControllers;

/// Initializes and returns a newly created tool stack controller with a default configuration.
///
/// \param photoEditViewController The view controller that acts as the root view controller and handles all rendering.
///
/// \returns  The initialized tool stack controller object.
- (nonnull instancetype)initWithPhotoEditViewController:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController;

/// Initializes and returns a newly created tool stack controller with the given configuration.
///
/// \param photoEditViewController The view controller that acts as the root view controller and handles all rendering.
///
/// \param configuration The configuration options to apply.
///
/// \returns  The initialized and configured tool stack controller object.
- (nonnull instancetype)initWithPhotoEditViewController:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController configuration:(IMGLYConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;

/// :nodoc:
- (void)viewDidLoad;

/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;

/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;

/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;

/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;

/// :nodoc:
- (void)updateViewConstraints;

/// :nodoc:
- (void)didReceiveMemoryWarning;

/// :nodoc:
- (UIViewController * _Nullable)childViewControllerForStatusBarHidden;

/// :nodoc:
- (UIViewController * _Nullable)childViewControllerForStatusBarStyle;

/// :nodoc:
- (BOOL)shouldAutomaticallyForwardAppearanceMethods;

/// :nodoc:
- (BOOL)shouldAutorotate;

/// :nodoc:
- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation;

/// Pushes a tool controller onto the receiver's stack and updates the display.
///
/// \param toolController The tool controller to push onto the stack. If the tool controller is already on the tool stack, this method throws an exception.
///
/// \param animated Specify <code>true
/// </code> to animate the transition and <code>false
/// </code> if you do not want the transition to be animated
///
/// \param completion A completion handler to run after the transition is complete.
- (void)pushToolController:(IMGLYPhotoEditToolController * _Nonnull)toolController animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;

/// Pops the top tool controller from the tool stack and updates the display.
///
/// \param animated Set this value to <code>true
/// </code> to animate the transition. Pass <code>false
/// </code> otherwise.
///
/// \param completion A completion handler to run after the transition is complete.
///
/// \returns  The tool controller that was popped from the tool stack.
- (IMGLYPhotoEditToolController * _Nullable)popToolControllerAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
@end


@interface IMGLYToolStackController (SWIFT_EXTENSION(imglyKit)) <IMGLYPhotoEditViewControllerDelegate>

/// :nodoc:
- (void)photoEditViewController:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController didSelectToolController:(IMGLYPhotoEditToolController * _Nonnull)toolController wantsCurrentTopToolControllerReplaced:(BOOL)replaceTopToolController;

/// :nodoc:
- (void)photoEditViewControllerPopToolController:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController;

/// :nodoc:
- (IMGLYPhotoEditToolController * _Nullable)photoEditViewControllerCurrentEditingTool:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController;

/// :nodoc:
- (void)photoEditViewController:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController didSaveImage:(UIImage * _Nonnull)image;

/// :nodoc:
- (void)photoEditViewControllerDidFailToGeneratePhoto:(IMGLYPhotoEditViewController * _Nonnull)photoEditViewController;

/// :nodoc:
- (void)photoEditViewControllerDidCancel:(IMGLYPhotoEditViewController * _Nonnull)photoEditviewController;
@end




/// Options for configuring a ToolStackController.
SWIFT_CLASS_NAMED("ToolStackControllerOptions")
@interface IMGLYToolStackControllerOptions : NSObject

/// The background color of the main toolbar.
@property (nonatomic, readonly, strong) UIColor * _Nonnull mainToolbarBackgroundColor;

/// The background color of the secondary toolbar.
@property (nonatomic, readonly, strong) UIColor * _Nonnull secondaryToolbarBackgroundColor;

/// Whether or not the navigationBar of the embedding navigationController should be used to navigate between different tools. Setting this to true means that the lower bar will not display any buttons to apply or discard changes, but the navigation bar at the top will. Default is false.
///
/// You would typically set this to <code>true
/// </code>, if you push the editor onto a navigation stack.
/// If a back button is present, that back button will be displayed while inside the main editor
/// (i.e. when you are not inside a tool). If no back button is present, a <code>Cancel
/// </code> button will
/// be displayed.
@property (nonatomic, readonly) BOOL useNavigationControllerForNavigationButtons;

/// Whether or not the navigationBar of the embedding navigationController should be used to show the title of the different tools. Setting this to true means that the lower bar will not display any title, but the navigation bar at the top will. Default is false.
@property (nonatomic, readonly) BOOL useNavigationControllerForTitles;

/// Returns a newly allocated instance of ToolStackControllerOptions using the default builder.
///
/// \returns  An instance of <code>ToolStackControllerOptions
/// </code>.
- (nonnull instancetype)init;

/// Returns a newly allocated instance of ToolStackControllerOptions using the given builder.
///
/// \param builder A <code>ToolStackControllerOptionsBuilder
/// </code> instance.
///
/// \returns  An instance of <code>ToolStackControllerOptions
/// </code>.
- (nonnull instancetype)initWithBuilder:(IMGLYToolStackControllerOptionsBuilder * _Nonnull)builder OBJC_DESIGNATED_INITIALIZER;
@end



/// The default ToolStackControllerOptionsBuilder for ToolStackControllerOptions.
SWIFT_CLASS_NAMED("ToolStackControllerOptionsBuilder")
@interface IMGLYToolStackControllerOptionsBuilder : NSObject

/// The background color of the main toolbar
@property (nonatomic, strong) UIColor * _Nonnull mainToolbarBackgroundColor;

/// The background color of the secondary toolbar
@property (nonatomic, strong) UIColor * _Nonnull secondaryToolbarBackgroundColor;

/// Whether or not the navigationBar of the embedding navigationController should be used to navigate between different tools. Setting this to true means that the lower bar will not display any buttons to apply or discard changes, but the navigation bar at the top will. Default is false.
///
/// You would typically set this to <code>true
/// </code>, if you push the editor onto a navigation stack.
/// If a back button is present, that back button will be displayed while inside the main editor
/// (i.e. when you are not inside a tool). If no back button is present, a <code>Cancel
/// </code> button will
/// be displayed.
@property (nonatomic) BOOL useNavigationControllerForNavigationButtons;

/// Whether or not the navigationBar of the embedding navigationController should be used to show the title of the different tools. Setting this to true means that the lower bar will not display any title, but the navigation bar at the top will. Default is false.
@property (nonatomic) BOOL useNavigationControllerForTitles;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A ToolStackItem object manages the views to be displayed in the toolbars of a ToolStackController.
SWIFT_CLASS_NAMED("ToolStackItem")
@interface IMGLYToolStackItem : NSObject

/// The view that should be displayed in the main toolbar.
@property (nonatomic, strong) UIView * _Nullable mainToolbarView;

/// The title label that is shown in the secondary toolbar.
@property (nonatomic, strong) UILabel * _Nullable titleLabel;

/// The discard button that is shown in the secondary toolbar. Set to nil to remove.
@property (nonatomic, strong) UIButton * _Nullable discardButton;

/// The apply button that is shown in the secondary toolbar. Set to nil to remove.
@property (nonatomic, strong) UIButton * _Nullable applyButton;

/// Use this method to apply changes to an instance of ToolStackItem.
///
/// \param block The changes to apply.
- (void)performChanges:(void (^ _Nonnull)(void))block;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A TooltipSlider object is a visual control used to select a single value from a continuous range of values. Sliders are always displayed as horizontal bars. An indicator, or thumb, notes the current value of the slider and can be moved by the user to change the setting. A vertical indicator, or neutral point, notes the default, unchanged value of the slider. Additionally a TooltipSlider also presents a tooltip above the thumb image that displays the current selected value while dragging.
SWIFT_CLASS("_TtC8imglyKit13TooltipSlider")
@interface TooltipSlider : IMGLYSlider

/// The tooltip that is displayed above the thumb image.
@property (nonatomic, readonly, strong) SliderTooltip * _Nonnull tooltip;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)layoutSubviews;

/// :nodoc:
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event;

/// :nodoc:
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
@end


@interface UIColor (SWIFT_EXTENSION(imglyKit))

/// Returns the hue, saturation and brightness values for the receiver.
@property (nonatomic, readonly, strong) IMGLYHSB * _Nonnull imgly_hsb;
@end


@interface UIImage (SWIFT_EXTENSION(imglyKit))

/// Returns a copy of the image, taking into account its orientation
@property (nonatomic, readonly, strong) UIImage * _Nonnull imgly_normalizedImage;

/// Returns a rescaled copy of the image, taking into account its orientation
///
/// <ul><li>discussion: The image will be scaled disproportionately if necessary to fit the bounds specified by the parameter.</li></ul>
/// \param size The size of the rescaled image.
///
/// \returns  The rescaled image.
- (UIImage * _Nonnull)imgly_normalizedImageOfSize:(CGSize)size;

/// Returns a copy of the image, that has UIEdgeInsets set, based on the informations give within a 9 patch image.
///
/// \param image An image must be a standard 9 patch image.
///
/// \returns  An image that is rescaleable based on the information given by the input image.
- (UIImage * _Nonnull)imgly_resizableImageFrom9Patch:(UIImage * _Nonnull)image;

/// Draws the receiver's in the given rect with the given content mode.
///
/// \param rect The rect to draw into.
///
/// \param contentMode The content mode to use for drawing.
- (void)imgly_drawInRect:(CGRect)rect withContentMode:(UIViewContentMode)contentMode;
@end



/// A VideoRecordButton is a button that can be used to start a video recording. It animates between a 'Start recording' and a 'Stop recording' state.
SWIFT_CLASS("_TtC8imglyKit17VideoRecordButton")
@interface VideoRecordButton : UIControl

/// Whether or not the button is currently in recording mode.
@property (nonatomic) BOOL recording;

/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :nodoc:
- (void)layoutSubviews;

/// :nodoc:
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event;

/// :nodoc:
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;

/// :nodoc:
- (void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
@end

#pragma clang diagnostic pop
